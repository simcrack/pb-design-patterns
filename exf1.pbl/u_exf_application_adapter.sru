forward
global type u_exf_application_adapter from nonvisualobject
end type
type st_encrypt_result from structure within u_exf_application_adapter
end type
end forward

type st_encrypt_result from structure
	string		s_key
	blob		bl_cipher
end type

global type u_exf_application_adapter from nonvisualobject
end type
global u_exf_application_adapter u_exf_application_adapter

type prototypes

private function boolean pef_get_username ( &
	ref string as_buffer, &
	ref ulong aul_buflen &
) library 'advapi32.dll' alias for 'GetUserNameW'

private function boolean pef_get_computername ( &
	long al_name_type, &
	ref string as_buffer, &
	ref ulong buflen &
) library 'kernel32.dll' alias for 'GetComputerNameExW'

private function ulong pef_bcrypt_generate_random ( &
	ulong aul_h_algorithm_provider, &
	ref blob aby_buffer, & 
	ulong aul_buffer_length, &
	ulong aul_flags &
) library 'bcrypt.dll' alias for 'BCryptGenRandom'

end prototypes

type variables


protected u_exf_serialization pu_serialization

constant long CL_IMAGE_ERROR = 1
constant long CL_IMAGE_WARNING = 2

//2021-01-26 Simon Reichenbach, Icons als blob für Warnung und Fehler
protected blob pbl_pic_warning
protected blob pbl_pic_error

//2022-05-17 Simon Reichenbach, Ticket 300165: Kann von erbenden Adpatern überschrieben werden, standardmässig leer
protected string ps_support_mail = ''

//2022-03-31 Simon Reichenbach, Ticket 21348: Datentypen für Exception-Daten
string CS_COMPLEX_DATA_DATAOBJECT = 'dataobject'
string CS_COMPLEX_DATA_UNDEFINED = ''
string CS_COMPLEX_DATA_STRING = 'string'

//2022-05-17 Simon Reichenbach, Ticket 300164: Blacklist für Dataobjects
protected string ps_confidential_dataobjects[]

//2023-01-31 Simon Reichenbach, Ticket 300424: EXF Server
protected boolean pbo_auto_upload_enabled = false
protected string ps_exception_server_api_key = ''
protected string ps_exception_server_url = ''
protected ulong pul_exception_server_package_size = 1024
protected ulong pul_exception_server_timeout = 5
protected ulong pul_exception_server_max_payload_size  = 102400 // = 5242880 // 5 MiB

protected constant ulong PCUL_BCRYPT_USE_SYSTEM_PREFERRED_RNG = 2

protected constant long PCL_GETCOMPUTERNAME_FORMAT_NET_BIOS = 1
protected constant long PCL_GETCOMPUTERNAME_FORMAT_DNS_FQDN = 4
end variables

forward prototypes
public function string of_get_text (long al_text_tbz, string as_text_fallback)
public subroutine of_unspawn_window (window aw_window)
public subroutine of_spawn_window (window aw_window)
public subroutine of_set_blur (boolean abo_blur)
public subroutine of_display (throwable ath_error)
public subroutine of_display (u_exf_error_data au_error)
protected function message pf_backup_message_obj ()
protected subroutine pf_restore_message_obj (message am_message)
public function blob of_get_image (long al_image)
protected function string pf_globalreplace (string as_source, string as_old, string as_new)
protected function string pf_get_pic_as_base64 (long al_image)
public subroutine of_report_case (string as_error)
protected function boolean pf_is_inherited_from (powerobject apo_object, string as_parent_classname)
public function u_exf_blob of_parse_to_blob (powerobject apo_object)
public function string of_get_current_username ()
protected function boolean pf_is_dataobject_confidential (powerobject apo_dataobject)
public subroutine of_add_confidential_dataobject (string as_dataobject)
public function u_exf_error_data of_download (string as_name, string as_key) throws u_exf_ex
public function st_encrypt_result pf_serialize_and_encrypt (u_exf_error_data au_error) throws u_exf_ex
public function boolean of_is_auto_ubload_enabled ()
protected function string pf_get_current_computername ()
protected function string pf_get_context_information ()
public function string of_upload (u_exf_error_data au_error, string as_name) throws u_exf_ex
protected function string pf_get_setting (string as_section, string as_key, string as_default_value)
protected function integer pf_get_setting (string as_section, string as_key, integer ai_default_value)
protected function boolean pf_get_setting (string as_section, string as_key, boolean abo_default_value)
public subroutine of_enable_auto_upload (boolean abo_auto_upload)
public function u_exf_blob of_parse_to_blob (any aa_data, u_exf_blob au_else)
end prototypes

public function string of_get_text (long al_text_tbz, string as_text_fallback);//Zweck		Ermittelt zu einer Sprachtext-Nr den zugehörigen Text in der korrekten Sprache
//				Muss im vererbten Objekt implementiert werden
//Argument	al_text_tbz			Textnummer
//				as_text_fallback	Text, als Ersatz, falls Übersetzung nicht gefunden wurde
//Return		string	
//Erstellt	2020-11-17 Simon Reichenbach

return as_text_fallback

end function

public subroutine of_unspawn_window (window aw_window);//Zweck		Wird aufgerufen, bevor ein offenes Fenster des Exception Frameworks geschlossen wird
//				Kann in der Applikation überschrieben werden (Dependency Injection)
//Argument	aw_window	Fenster, welches geschlossen wurde
//Return		(none)
//Erstellt	2020-11-17 Simon Reichenbach

end subroutine

public subroutine of_spawn_window (window aw_window);//Zweck		Wird aufgerufen, wenn ein Fenster des Exception Frameworks geöffnet wird
//				Kann in der Applikation überschrieben werden (Dependency Injection)
//Argument	aw_window	Fenster, welches geöffnet wurde
//Return		(none)	
//Erstellt	2020-11-17 Simon Reichenbach

aw_window.show()
end subroutine

public subroutine of_set_blur (boolean abo_blur);//Zweck		Macht, dass die Applikation (a3) für den User als blockiert oder deblockiert markiert wird
//				Im Falle vom A3 wird dazu ein Grauschleier über das gesamte GUI gelegt
//Argument	abo_blur	true	Blur-Effekt aktivieren
//							false Blur-Effekt deaktivieren
//Erstellt	2020-11-17 Simon Reichenbach

end subroutine

public subroutine of_display (throwable ath_error);//Zweck		Zeigt dem Benutzer einen RuntimeError oder Exception als Fehlermeldung an
//Argument	ath_e	u_exf_re-Objekt
//					u_exf_ex-Objekt
//					beliebiges anderes throwable-Objekt
//Erstellt	2020-11-16 Simon Reichenbach
//Geändert	2021-01-12 Simon Reichenbach	Kein openwithparm verwenden, damit message-Objekt nicht überschrieben wird

message lm_backup

lm_backup = pf_backup_message_obj()
of_set_blur(true)

openwithparm(w_exf_error_message, ath_error)

of_set_blur(false)
pf_restore_message_obj(lm_backup)
end subroutine

public subroutine of_display (u_exf_error_data au_error);//Zweck		Zeigt dem Benutzer eine u_exf_error_data-Instanz als Fehlermeldung an
//Argument	au_error u_exf_error_data-Instanz
//Erstellt	2020-11-16 Simon Reichenbach
//Geändert	2021-01-12 Simon Reichenbach	Kein openwithparm verwenden, damit message-Objekt nicht überschrieben wird

//2022-11-22 Simon Reichenbach, Ticket 301812: Bugfix für alte base.framework Versionen
//Dieser Check wird für erp.win.base.framework<=11.0.0 benötigt
//Er umgeht einen Bug in inf1_u_json.of_get_attribute(), wo fälschlicherweise ein SignalError() 
//ausgeführt wird (siehe auch Ticklet 119875).
string ls_stacktrace[]
if gu_e.of_get_stacktrace(ls_stacktrace) > 4 then
	if left(ls_stacktrace[upperbound(ls_stacktrace) -3], 28) = 'inf1_u_json.of_get_attribute' &
	and mid(ls_stacktrace[upperbound(ls_stacktrace) -2], 3, 13) = '.+systemerror' then
		return
	end if
end if
message lm_backup

lm_backup = pf_backup_message_obj()
of_set_blur(true)

openwithparm(w_exf_error_message, au_error)

of_set_blur(false)
pf_restore_message_obj(lm_backup)

end subroutine

protected function message pf_backup_message_obj ();//Zweck		Erstellt eine Kopie des globalen message Objekts
//				Wird benötigt, damit das Exception Framework ein fenster öffnen kann,
//				ohne dass das globale message Objekt verändert wird
//Return		message	Kopie von der globalen Variable message
//Erstellt	2021-01-12 Simon Reichenbach

message lm_msg
lm_msg = create message

lm_msg.handle = message.handle
lm_msg.number = message.number
lm_msg.wordparm = message.wordparm
lm_msg.longparm = message.longparm
lm_msg.doubleparm = message.doubleparm
lm_msg.stringparm = message.stringparm
lm_msg.powerobjectparm = message.powerobjectparm
lm_msg.processed = message.processed
lm_msg.returnvalue = message.returnvalue

return lm_msg
end function

protected subroutine pf_restore_message_obj (message am_message);//Zweck		Stellt den Zustand des globalen message Objekts wieder her
//				Wird benötigt, damit das Exception Framework ein fenster öffnen kann,
//				ohne dass das globale am_message Objekt verändert wird
//Argument	am_message Kopie von der globalen Variable message, welche in diese geschrieben werden soll
//Erstellt	2021-01-12 Simon Reichenbach

message.handle = am_message.handle
message.number = am_message.number
message.wordparm = am_message.wordparm
message.longparm = am_message.longparm
message.doubleparm = am_message.doubleparm
message.stringparm = am_message.stringparm
message.powerobjectparm = am_message.powerobjectparm
message.processed = am_message.processed
message.returnvalue = am_message.returnvalue

end subroutine

public function blob of_get_image (long al_image);//Zweck		Gibt ein bestimmtes Symboild als blob zurück
//				Wird benötigt, weil das Exception Framework nicht selber auf das Dateisystem zugreifen darf,
//				um ein Bild aus einer Datei zu laden
//Argument	al_image	CL_IMAGE_ERROR	Bild für einen Fehler
//							CL_IMAGE_WARNINGBild für eine Warnung
//Return		blob	Quelltext einer Bilddatei (jpeg, gif, png), das Bild muss quadratisch sein
//Erstellt	2021-01-26 Simon Reichenbach

choose case al_image
	case CL_IMAGE_ERROR
		return pbl_pic_error
		
	case CL_IMAGE_WARNING
		return pbl_pic_warning
		
end choose

end function

protected function string pf_globalreplace (string as_source, string as_old, string as_new);//Zweck		Ersetzt alle Vorkommnisse eines gesuchten Strings in einem anderen String
//Argument	as_source	Ursprungsstring
//				as_old		Gesuchter String, welcher ersetzt werden soll
//				as_new		String, mit welchem as_needle ersetzt werden sol
//Return		string
//Erstellt	2021-02-09 Simon Reichenbach	(Von inf1_u_service übernommen)

long ll_len_old, ll_len_new, ll_pos

ll_len_old = len(as_old)
ll_len_new = len(as_new)
ll_pos = 1

ll_pos = pos(as_source, as_old, ll_pos)
do while ll_pos > 0
	 as_source = replace(as_source, ll_pos, ll_len_old, as_new)
	ll_pos = pos(as_source, as_old, ll_pos + ll_len_new)
loop

return as_source

end function

protected function string pf_get_pic_as_base64 (long al_image);//Zweck		Gibt den Base64-Code eines bestimmten Bildes zurück
//				Wird benötigt, weil das EXF nicht auf das Dateisystem zugreifen darf
//Argument	al_image	CL_IMAGE_ERROR	Bild für einen Fehler
//							CL_IMAGE_WARNING Bild für eine Warnung
//Return		Base64-String des gesuchten Bildes
//				Wenn das gesuchte Bild nicht existiert, wird ein Leerstring zurückgegeben
//Erstellt	2021-01-26 Simon Reichenbach


choose case al_image
	case CL_IMAGE_ERROR
		return + '/9j/4AAQSkZJRgABAQIAdgB2AAD/4R7oRXhpZgAASUkqAAgAAAAHABIBAwABAAAAAQAAABoBBQABAAAAYgAAABsBBQABAAAAagAAACgBAwABAAAAAwAAADEBAgANAAAAcgAAADIBAgAUAAAAgAAAAGmHBAABAAAAlAAAAKYAAAD8KQAAWwAAAPwpAABbAAAAR0lNUCAyLjEwLjIyAAAyMDIxOjAxOjI2IDIwOjUzOjIyAAEAAaADAAEAAAABAAAAAAAAAAgAAAEEAAEAAAAAAQAAAQEEAAEAAAAAAQAAAgEDAAMAAAAMAQAAAwEDAAEAAAAGAAAABgEDAAEAAAAGAAAAFQEDAAEAAAADAAAAAQIEAAEAAAASAQAAAgIEAAEAAADOHQAAAAAAAAgA' &
			+ 'CAAIAP/Y/+AAEEpGSUYAAQEAAAEAAQAA/9sAQwAIBgYHBgUIBwcHCQkICgwUDQwLCwwZEhMPFB0aHx4dGhwcICQuJyAiLCMcHCg3KSwwMTQ0NB8nOT04MjwuMzQy/9sAQwEJCQkMCwwYDQ0YMiEcITIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy/8AAEQgBAAEAAwEiAAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElK' &
			+ 'U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm' &
			+ '5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8A9/ooooAKKKKACiiigAooqjd6zpenziC91Kztpiu8RzTqjFc4zgnOMg8+1JtLcqMJSdoq5epCcAn0rzvxr8Qo7OGG10K9zdFlkaeIRyx7PmBXOT82cHp0715fqesX+sXDz38/nSuQWbYq5IGB0A7VhPERi7LU9zBcP18TDnnLlT8rv7tPzPZtY+I2kaJqk2n3NtfPNFt3NGiFTlQwxlh2NclqPxbv/t8n9mWlt9j48v7TG3mdBnO18dc/hivOKK55Yib20PosPkGEpJc65nbW+1+9uhLdztealeX0gAlupmmcL90MxJOPbmoqKKwPbSSVkFFFFAwooooAKltJ2stStL6MAy2syzIG+6SpBGfbioqK' &
			+ 'BNJqzPR9P+Leofbo/wC0rS1+yc+Z9mjbzOhxjc+OuPwzWtffGjw7p9jJdTWWqMkeNwSKMnkgd3968ioreOImtzxcRkGDq3cVyu3Tb1sfS+k6lDrOjWOqW6yLBe28dxGsgAYK6hgDgkZwfU1cr5p03Vr3SLtLqxn8qaMkq2xWxkYPBBHQ16J4c+KMcFhJHrzXVzdGUlJIoowoTAwOq85z2710QxMXvofP4vh3EUVzUnzr7n92v5nqVFUrTWdL1CcwWWpWdzMF3mOGdXYLnGcA9Mkc+9Xa3TT2PAlCUXaSsFFFFMkKKKKACiiigAooooAKKKKACioLy9tNOtXur25htrePG+aeQIi5OBkngckD8a4jxr4/h0/ToY9BvbW5nuQSLm3nSQQgFTyuCDuB' &
			+ 'I5xUzmoq7OnC4Sriqip0lq/u+Yvin4mReHteTTbfT01BfK3STR3QURvuYFCApwRtHfv0ryfV9Xvtdv1vdSn8+4SIRK+xVwgJOMKAOpNVrq5mvLua6uH3zTO0kjYAyxOScDjqairzqlWU3rsfoGAyuhg4pxXvdX/W3yCiiisz0wooooAKKKKACiiigAooooAKKKKACiiigAooooAvaRrF9oV897ps/kXDxmJn2K2VJBxhgR1Ar1nwv8S4fEOuPp1xYJp6+XujmkugwkfcoCAFRknce/bpXjFS2tzLZ3cN1bvsmhdZI2wDhgcg4PHUVpTqyg9NjzcfllDGRblH3raP+t/nc+nqK4DwX4/j1Cwki1y7toLi3xm4nmSPztxY8LgAbQAOM13Nrd219bJc' &
			+ '2dxFcQPnbLC4dWwcHBHB5BFejGakro/PsVhKuGqOnUW3Xp8mTUUUVRzBRRRQAUUUUAFQXt5Bp1hcXt1J5dvbxNNK+CdqKCScDk8A9KnrgfH/AI1s9Pt7vQY4BdT3EEkFwCxUQh0G08qQ2Q2cA9qmc1FXZ04TC1MVVVKmrv8ATucB418ay+MZo7e3ikt9KgeQcTlkv0JGxmTAxjaGAbJBbtiuYVQqhVACgYAA4AoVQqhVACgYAA4Apa8yUnJ3Z+k4TCUsLSVOmgoooqTqCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAAgEEEZB7V6h4E8d6PpHh5dM1NhZraAmOQKz+buZmPCr8uMj65ry+ggEEEZB7VcJuDujjxuCpYyl7Kre1' &
			+ '76H07aXUN9ZQXls++CeNZY3wRuVhkHB5HBqauA8AeNLTUIbbQ5Yvs9xBBHDbjcX87Yh3HhcLgLnk967+vShJSV0fnGLwtTDVXTqK3b06MKKKKo5gooqjrV3Lp+hahe24Rpre2kljEgJUsqkjOOcZFDdtSoxcpKK6nH/E3xTq3h2Gwt9MjhKXyzJNK+4PEBsAZCGGD8xOeegrx+5uri8uGuLqeSeZ8bpJXLMcDAyTz0FWNW1e713U5tSvkgS5m271gBCDChRjJJ6Ad6pV5lWpzyv0P0fK8vjg6Ci17z3f6fLYKKKKzPTCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAltrq4s7hbi1nkgmTO2SJyrDIwcEc9DXsXw' &
			+ '08Uap4ht7231FIdtikKRSruLyAhgS5LHJ+UHPHU14xV7R9XutC1SHUrJIXuId2xZgShypU5wQehPetKdRwlfoebmeAjjKEopLm6P+u+3zPpWiqWjXcuoaHp97OEWa4to5XCAhQzKCcZ7ZNXa9JO6ufm84uMnF9Arzr4ieMI7a2udEt4WNzkRzPIvybHjOdpDZz8w6jHWvRScda+bdc1R9Z1m41CRmZpduSygHhQvQcdqwxE3GNl1Pc4fwUcRXc57R/Pp+TM6iiiuA++CiiigAooooAKKKmtbWa9uUt7eNpJHYKAqk9Tjt9aBNpK7GRRmaZIlIDOwUZ6c10svgi+TQ11MT2+zy5JGXe2cJnp8vt613fgXwYLC1F3qNuouCysnzOrKVZuoOPau+ZFa' &
			+ 'MoRlSCCPauqnh7q8j5XH8Q+zq8lBXSer7ny9RXpnjvwO8QbUdMtQcyO8yxl3dtzDGBz6n0rzWSN4pGjkRkdSVZWGCCOoIrnnBwdme/g8bSxdNVKf3dhtFFFSdgUUUUAFFORHkkWONWZ2ICqoyST2FejeBfA8lxt1HUrUKFkR4lkLoy7WOeMD0FVCDm7I5MZjKWEpupUf/BOeg8E302iPqXn24QJG6rvbOH9fl9/WubmiaGaSJiCyMVOOmQcV9PJGqRrGowqgAD2FcH468GDUbQ3Wn26/aVZmb5nJYsy9AM+9dFTD2V4nz+A4h9pW5K6sm9H29Txqip7u0nsbmS3uI2jkRipDKR0OO/0qCuU+qTTV0FFFFAwooooAKKKKAPUPhb4jtLeIaC8cxurm' &
			+ '4eVHVRsAEYPJznPyHt6V6nXzRpWpXGkalDfWshjniztYKGxkEHg8dCa+jrHUbHU4TNYXlvdxK2wvBKsihsA4yD15H513Yad48r6HwvEWC9lXVaO0t/X+rHNfEXWb/Q/D9vc6dP5MzXSxltitlSjnGGB7gV4VXpHxb1K7/tW10vzf9D8hLjy9o/1m6Rc5xnp2zivN6wxErzse/kGHVLBqVleWt/Lpf0CiiisD2wooooAKKKKAHxxSTNtijd2AzhRk17B4M8CwWAg1G7DtcYPyOjIVIfIP3vb0qp4I8D2ojmu74NI2WjCsrJx8pzw31r0sAAYFdlCj9qR8bnWcc/7ig9Or7gAAMCiiius+VGSxJNGY5BlT1Ga8w8deBYYreTUtNikMpdnkijRnLlmX' &
			+ '3OMZJ6V6lTJYkmjMcgyp6jNRUpqaszswWNq4SqpwenVdz5hkjeKRo5EZHUlWVhggjsRTa9M8ceBBFJc6npyytkB2gjiZ9zM5yc5PY9Mdq8zrzZwcHZn6JgsZTxdL2lN+vkFORHkkWONWZ2ICqoyST2FNr0jwP4F+0TW+paisqgAusMkTJtZXGOcjsD270Qg5uyHjMZTwlJ1Kj/4JN4F8CxXEEepalHKsgdXjjkjZCpVm9xnOB2r1GGGO3iWKJdqL0Gc0Qwx28SxRLtRegzmpK9GnTUFZH53jsdVxdVzm9Oi7BQRkYNFFaHEcD4z8C2+orPqFqHW5wPlRGcsS+Sfve57V47LDLCwWWN42Izh1IOK+oCMjBrzbxv4HtXjhurENE+VjKqrPx8xzy30r' &
			+ 'kr0ftRPqclzjk/cV3p0fY8looorjPswooooAKKKKACvYvhBHHF4UukjAH+nOcZ/2I68dr0b4SX9z/bF1p3mf6J9nefy9o+/ujXOcZ6dulbYdpVFc8bPqUqmBly9LP5Hns93e3jiS+vbi8lA2iSeRnYL6ZJPHJ/Oo6KKxPYSSVkFFFFAwooooAKKKKAO/8E+O10oTW+qyzSRtudZZJWfn5Rtxg+hOa9hilSeMSRtuQ9DjFfL9eleB/HYhlttM1FpWyCizSSs+5mcYGMHsfXtXVQrW92R8rneT869vQWvVf5HrNFMilSeMSRtuQ9DjFPrtPjWraMKKKKAEZFdSrqGU9QRkV5V428AzB4brSYYiuFjaGNEiGfmJbqPYV6tTXjSQYkRWHXDDNRUpqasz' &
			+ 'swWOq4Opz0/uPJ/BXgKeWSa61SKNUw0axSIkgz8p3dfqK9YREjQIiqqjoFGBSRxRxLtjjVBnOFGKfSp01BWQ8djquMqc9T5IKKKK0OIKKKZLKkMZkkOFHU4oBK4SypDGZJDhR1OK8g8beO11QQ2+lTTRou12ljlZOfmG3GB6g5q3448diWS50zTmlXACNPHKybWVzkYwOw65715nXFXrX92J9jkmT8q+sYha9F/mFFFFcp9WFFFFABRRRQAVLb3l7ZSGSxvbi0lI2mSCQoxHpkEccD8qiooE0mrMKKKKBhRRRQAUUUUAFFFFABTo5HikWSNmR1IZWU4II7g02igR6V4E8cPCF07U7oHdIiQtIHd23Mc5PPqK9WilSeMSRtuQ9DjFfL9d/wCBPGv9' &
			+ 'lLFpVxBujklSOJo0yfmY53EsP73YV1Ua9vdkfLZxkinfEUN+q/U9kopsbiWJJFzhlDDPvTq7T40KKKKACiiigAoopsjiONnOcKCTj2oASWVIYzJIcKOpxXlfjvxw8itp2mXQGJHSZkDo67WGMHj0PrVTx541GprLpNvBtRJHjlaRMH5WGNpDH+73Fefd64q1e/uxPscnyRRtiK+/RfqOkkeWRpJHZ3YlmZjkknqSabRRXKfVbBRRRQMKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAopyI8kixxqzOxAVVGSSewr0bwL4HkuNuo6lahQsiPEshdGXaxzxgegqoQc3ZHJjMZSwlN1Kj/4J1Hw9bUTpii6+y+QIIfJ8rdu27T97PGenT3r' &
			+ 's6aiLHGqIMKoAA9qdXpwjyxsfmuJre3qyqWtcKKKKowCiiigArj/AB//AGj/AGU/2T7L5HkTed5u7dt2j7uOM9evtXYUjqHRkYZVhgj2qZx5lY3w1b2NWNS17Hy6etFemeO/A7xBtR0y1BzI7zLGXd23MMYHPqfSvNZI3ikaORGR1JVlYYII6givMnBwdmfpODxtLF01Up/d2G0UUVJ2BRRRQAUUUUAFFFFABRRRQAUVJPaXtm4jvrK4s5SNwjnjZGK+uCBxwfyqOgSaaugooooGFFFFABRRRQAU5EeSRY41ZnYgKqjJJPYU2vSPA/gX7RNb6lqKyqAC6wyRMm1lcY5yOwPbvVQg5uyOTGYynhKTqVH/AMEm8C+BYriCPUtSjlWQOrxxyRshUqze' &
			+ '4znA7V6jDDHbxLFEu1F6DOaIYY7eJYol2ovQZzUlejTpqCsj87x2Oq4uq5zenRdgooorQ4goopryJGMu6qOmWOKAHUU1JElXdG6uOmVOadQAUUUUAMliSaMxyDKnqM15h468CwxW8mpabFIZS7PJFGjOXLMvucYyT0r1KmSxJNGY5BlT1GaipTU1ZnZgsbVwlVTg9Oq7nzDJG8UjRyIyOpKsrDBBHYim16Z448CCKS51PTllbIDtDHEz7mZzk5yex9O1eZ15s4ODsz9FwWMp4ul7Sm/XyCiiipOsKKKKACiiigAooqW3s729kMdjZXF3KBuMcEZdgPXAB45H50CbSV2eh/FvTbv+1bXVPK/0PyEt/M3D/WbpGxjOenfGK83r3X4iaLqGu+H4LXTb' &
			+ 'fz5kulkZd6rhQjjOWIHUivCq3xEbTueLkGIVXBqN1eOny6XCiiisD2wooooAKKKKAPSPBPgOaZ5rrU4owgDRrFIiyDPynd1+o6V6yiJGgRFVVHQKMCvNvA/je1Mc1pe7omy0gZmZ+PlGOF+telggjIr0KCjy+6fnWczxUsQ/rCt27fIKKKK3PICiimSypDGZJDhR1OKASuEsqQxmSQ4UdTivIPGvjxdTENvpM00aLtdpY5XTn5gVxgeoOat+OPHYkkudM05pVwAjTRysm1lc5GMDsOue9eZ1xV61/difY5Jk/Kvb4ha9F/md/wCCvHY0oTW+qzTSRtudZZJXfn5QFxg+hOa9hilSeMSRtuQ9DjFfL9eleB/HYhlttM1FpWyCizSSs+5mcYGMHsfX' &
			+ 'tRQrW92Q87yfnXt8Oteq/wAj1mimRSpPGJI23Iehxin12nxrVtGFFFFACMiupV1DKeoIyK8p8beApleG70qGIrhY2hjjSMZ+Y7uo9h0r1cnFec+NvHFrDHDa2e6VyVkJVmTj5h3X6VjXUeX3j1snnio4hfV1fv2+Z5FRRRXnH6MFFFFABRRRQAV6N8JLC5/ti61Hy/8ARPs7weZuH390bYxnPTv0rzmvYvhBJHN4UunjIOL5xnH+xHW2HSdRXPFz6rKngZcvWy+R6DXzbrmlvo2s3GnyKytFtyGYE8qG6jjvX0lXHfEbRJtV8MySW7xqbVzdSeYSMoiNkDAPPIrqr0+eN+x8vkePeFxHI17s7J+Xn/wDw2iiivPP0IKKKKACiiigB8cskLbopHRi' &
			+ 'MZViDivWvA/jhr54dP1CdDKVODtcsWLgAEnI6GvIqfFIYZklUAsjBhnpkVcJuDujgx+Ap4ynyT36M+oAQRkUV5t4D8aLNbJptzCQ6uqI0acZdm65b3HavRnkCRNIQcKCT+FejCamro/PcXg6mFqunP8A4cJZUhjMkhwo6nFeV+O/HDyq2naZdAYkdJmjDo67WGMHj0PrVTx541GprLpNvBtRJHjlaRMH5WGNpDH+73Fefd65a1e/uxPpsnyRRtiK+/RfqOkkeWRpJHZ3YlmZjkknuTTaKK5T6rYKdHI8UiyRsyOpBVlOCCO4NNooA9K8CeOHhC6dqd0G3SIkLSB3dtzHOTz6ivVopUnjEkbbkPQ4xXy/Xf8AgTxr/ZSxaVcQbo5JUjiaNMn5mOdx' &
			+ 'LD+92FdVGvb3ZHy2cZIpXxFDfqv1PZKCcUxJBJEsgBwyhhn3rz7x54zW0tW0+2hJkd2RjIvGUZemG+tdU5qCuz5fCYSpiqqpQQ7xv43OnGawsJ0E+0fwuGDB8EZGB0FeQyzSzsGmleRgMZdiTj8aJpWnnkmYANIxYgdMk5pledUqObuz9DwGAp4Onyx36sKKKKg7wooooAKKKKALmlabcavqUNjaxmSeXO1QwXOASeTx0Br6OsdOsdMhMNhZ29pEzbykESxqWwBnAHXgflXm3wu8N2k8S69JJMLq3uHjRFYbCpjA5GM5+c9/SvUq7sNC0eZ9T4XiLG+2rqjHaO/r/VgqjrVpNqGhahZW5RZri2kijMhIUMykDOOcZNXqK6Wr6Hz8ZOMlJdD5p1bS' &
			+ 'LvQtTm02+eB7mHbvaAkocqGGMgHoR2qlXsvxN8Lat4ihsLjTJIQliszzRPuLyg7CFQBTk/KRjjqK8fubW4srhre6gkgmTG6OVCrDIyMg89DXmVafJK3Q/R8rzCOMoKTfvLdfr89yKiiisz0wooooAKKKKAHxSGGZJVALIwYZ6ZFdLL43vpNCXTPIt9nlyRs2xs4fPT5vf0rl6Kak1sYVcPSqtOavbYKKKKRuFFFFABRRRQAUUUUAdTb+Ob6DRH03yLcr5ccaNsbOE9fm9vSuZmlaeeSZgA0jFiB0yTmmUU3JvcwpYelSbcFa+4UUUUjcKKKKACiiigAq9o+kXWu6pDptk8KXE27Y0xIQYUsc4BPQHtVa2tbi8uFt7WCSeZ87Y4kLMcDJwBz0Fexf' &
			+ 'DTwvqnh63vbjUXh23yQvFEu4PGAGJDgqMH5gMc9DWlOm5yt0PNzPHxwdCUk1zdF/Xbf5HX6NaS6foen2U5Rpre2jicoSVLKoBxntkVdoor0krKx+bzk5Scn1CiiimSFcD4/8FWeoW93r0c4tZ7eCSe4JUsJgiDaOWAXAXGQO9d9UF7ZwajYXFldR+Zb3ETQypkjcjAgjI5HBPSpnBSVmdOExVTC1VVpuz/TsfMSsGUMpBUjIIPBFLXTeNfBUvg6aO4t5ZLjSp3kPEBVLBARsVnyc53BQWwSV75rmFYMoZSCpGQQeCK8yUXF2Z+k4TF0sVSVSmxaKKKk6gooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoJABJOAO9ISACScAdSa' &
			+ '9R8CeBNH1fw6up6movFuwRHGGZPK2synlW+bOB9MVcIObsjjxuNpYOl7Wre17aGr4B8FWmnQWuuSzfabieCOaA7Snk70O4cNhshscjtXfVDaWsNjZQWdsmyCCNYo0yTtVRgDJ5PAqavShFRVkfnGLxVTE1XUqO/b06BRRRVHMFFFFABRRRQBBeWVpqNq9re20NzbyY3wzxh0bByMg8HkA/hXEeNfAEOoadDJoNla209sCBbW8CRiYEqOWyANoBPOa76ipnBSVmdOFxdXC1FUpPVfd8z5huraazu5rW4TZNC7RyLkHDA4IyOOoqKvZvFPwzi8Q68mpW+opp6+VtkhjtQwkfcxLkhhkncO3brXk2r6RfaFfrY6lB5Fy8QmVN6tlCSM5UkdQa86pSlB' &
			+ '67H6BgM0oYyKUX73Vf1v8ilRRRWZ6YUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFS2ttLeXcNrbpvmmdY41yBlicAZPHU1Z0jR77Xb57LTYPPuEjMrJvVcKCBnLEDqRXrPhf4aQ+HtcfUbjUE1BfL2xwyWoURvuUhwSxwRtPbv1rSnSlN6bHm4/M6GDi1KXvW0X9bfOw3wV4Bi07T5Zdcs7a4uLjGbeeFJPJ2lhw2SDuBB4xXcWtpbWNsltZ28VvAmdsUKBFXJycAcDkk1NRXoxgoqyPz7FYuriajqVHv06fJBRRRVHMFFFFABRRRQAUUUUAFFFFABVG70bStQnE97ptnczBdgkmgV2C5zjJGcZJ496vUUmr7lRlKLvF2PPPG3w/ivo4brQ7' &
			+ 'FUugVjaCDy4o9nzEtjA+bJA69O1eXanouoaNO0N/b+TIpAI3q2CRkdCe1fSlIRkEetYTw8ZO60PcwXEFfDQ9nOPMl56/fr+R8u0V7prHw50jW9Um1C5ub5Jpdu5Y3QKMKF4yp7CuS1H4SX/2+X+y7u2+x8eX9qkbzOgznamOufwxXPLDzW2p9Hh8/wAJVS53yu2t9r9r9TziipbuBrPUryxkIMtrM0LlfullJBx7cVFWB7SaaugooooGFFFFABRRUtpA15qVnYxkCW6mWFC33QzEAZ9uaBNpK7IqK9H074Sah9uj/tO7tvsfPmfZpG8zocY3Jjrj8M11elfDbR9I1GK+gub5pYs4DyIV5BHZR61vDDze+h4mJz/CUYvkfM7XVtm+iv0+48a03Sb7' &
			+ 'WLpLawg86ZyQq71XOBk8kgdBXovhr4Xxy2MkmvJc2915hVI45Y2UpgYPRuc5716eiCONUGcKABmnV0Qw0Y76nz+K4ixFePLTXJ87v79PyKNpo2l6fOZ7LTbO2mK7DJDAqMVznGQOmQOPar1FFbpJbHgynKTvJ3CiiimSFFFFABRRRQB//9n/4Q6haHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA0LjQuMC1FeGl2MiI+IDxyZGY6UkRGIHht' &
			+ 'bG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOmlwdGNFeHQ9Imh0dHA6Ly9pcHRjLm9yZy9zdGQvSXB0YzR4bXBFeHQvMjAwOC0wMi0yOS8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIiB4bWxuczpwbHVzPSJodHRwOi8vbnMudXNlcGx1cy5vcmcvbGRmL3htcC8xLjAv' &
			+ 'IiB4bWxuczpHSU1QPSJodHRwOi8vd3d3LmdpbXAub3JnL3htcC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bXBNTTpEb2N1bWVudElEPSJnaW1wOmRvY2lkOmdpbXA6OWM0NTVkYTAtNGJhNS00NzkzLWIxNjEtMjJlY2IwMjJiOWZjIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOmNlN2M4YWE4LTBlZWMtNDYyYi05ODI1LTExOGJlMDYyNDM5ZiIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjhhODM0' &
			+ 'NDg1LWUzM2YtNGVhZS1hZWUzLWE1Zjk4ZmFhODkzYyIgR0lNUDpBUEk9IjIuMCIgR0lNUDpQbGF0Zm9ybT0iV2luZG93cyIgR0lNUDpUaW1lU3RhbXA9IjE2MTE2OTA4MDUzNTc4MjQiIEdJTVA6VmVyc2lvbj0iMi4xMC4yMiIgZGM6Rm9ybWF0PSJpbWFnZS9qcGVnIiB4bXA6Q3JlYXRvclRvb2w9IkdJTVAgMi4xMCI+IDxpcHRjRXh0OkxvY2F0aW9uQ3JlYXRlZD4gPHJkZjpCYWcvPiA8L2lwdGNFeHQ6TG9jYXRpb25DcmVhdGVkPiA8aXB0Y0V4dDpMb2NhdGlvblNob3duPiA8cmRmOkJhZy8+IDwvaXB0Y0V4dDpMb2NhdGlvblNo' &
			+ 'b3duPiA8aXB0Y0V4dDpBcnR3b3JrT3JPYmplY3Q+IDxyZGY6QmFnLz4gPC9pcHRjRXh0OkFydHdvcmtPck9iamVjdD4gPGlwdGNFeHQ6UmVnaXN0cnlJZD4gPHJkZjpCYWcvPiA8L2lwdGNFeHQ6UmVnaXN0cnlJZD4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0OmNoYW5nZWQ9Ii8iIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6ZDk2NmViYjgtYjU2NC00ZDdhLTg2YzEtMDZiNjNmYTgwZmE4IiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJHaW1wIDIuMTAgKFdpbmRvd3Mp' &
			+ 'IiBzdEV2dDp3aGVuPSIyMDIxLTAxLTI2VDIwOjUzOjI1Ii8+IDwvcmRmOlNlcT4gPC94bXBNTTpIaXN0b3J5PiA8cGx1czpJbWFnZVN1cHBsaWVyPiA8cmRmOlNlcS8+IDwvcGx1czpJbWFnZVN1cHBsaWVyPiA8cGx1czpJbWFnZUNyZWF0b3I+IDxyZGY6U2VxLz4gPC9wbHVzOkltYWdlQ3JlYXRvcj4gPHBsdXM6Q29weXJpZ2h0T3duZXI+IDxyZGY6U2VxLz4gPC9wbHVzOkNvcHlyaWdodE93bmVyPiA8cGx1czpMaWNlbnNvcj4gPHJkZjpTZXEvPiA8L3BsdXM6TGljZW5zb3I+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+' &
			+ 'IDwveDp4bXBtZXRhPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' &
			+ 'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' &
			+ 'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' &
			+ 'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' &
			+ 'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' &
			+ 'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' &
			+ 'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/eHBhY2tldCBlbmQ9InciPz7/4gKwSUNDX1BST0ZJTEUAAQEA' &
			+ 'AAKgbGNtcwQwAABtbnRyUkdCIFhZWiAH5QABABoAEwAIAC1hY3NwTVNGVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9tYAAQAAAADTLWxjbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1kZXNjAAABIAAAAEBjcHJ0AAABYAAAADZ3dHB0AAABmAAAABRjaGFkAAABrAAAACxyWFlaAAAB2AAAABRiWFlaAAAB7AAAABRnWFlaAAACAAAAABRyVFJDAAACFAAAACBnVFJDAAACFAAAACBiVFJDAAACFAAAACBjaHJtAAACNAAAACRkbW5kAAACWAAAACRkbWRkAAACfAAAACRtbHVjAAAAAAAAAAEA' &
			+ 'AAAMZW5VUwAAACQAAAAcAEcASQBNAFAAIABiAHUAaQBsAHQALQBpAG4AIABzAFIARwBCbWx1YwAAAAAAAAABAAAADGVuVVMAAAAaAAAAHABQAHUAYgBsAGkAYwAgAEQAbwBtAGEAaQBuAABYWVogAAAAAAAA9tYAAQAAAADTLXNmMzIAAAAAAAEMQgAABd7///MlAAAHkwAA/ZD///uh///9ogAAA9wAAMBuWFlaIAAAAAAAAG+gAAA49QAAA5BYWVogAAAAAAAAJJ8AAA+EAAC2xFhZWiAAAAAAAABilwAAt4cAABjZcGFyYQAAAAAAAwAAAAJmZgAA8qcAAA1ZAAAT0AAACltjaHJtAAAAAAADAAAAAKPXAABUfAAATM0AAJmaAAAmZwAAD1xt' &
			+ 'bHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAEcASQBNAFBtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEL/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wgARCABkAGQDAREAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAAAAcGCAMEBQIB/8QAGwEAAQUBAQAAAAAAAAAAAAAAAAMEBQYHAgH/2gAMAwEAAhADEAAA' &
			+ 'AbUgB8Bbs7cqmN1iSE7qcr9xWNYDqruGQoPZUYAAAanK1cIjW4A1tAAAAAG10hYqVyhivKoB8Cs0NsMAa2gAAAAAADJ7xaCZxqaua8tmdtrfEa4Bl9TbT6jKJhe/J1LV4Ld6bwVtZQJGrE21ncNrHDbFA21mAsHKZY1n9JWTK4KNhe7NzOOZveKmwe4cBKUAtNNYtWiH1/Q5dAd5WMtHNYx2FGHnz3174mY7QEZG6SAAwXNVgbezYvFAAGS7qFkJjJQI2hLVMg9x8nQAG/016XbSPJSoEtXgrPTON73bfV5W2ukVkyuFdYnV/J0A/ZPL+GnJJ5hfgHxJZm4ZGhJmO0BVMrtaOaxjY9SqnB7Zwk5PL7xcGfwTH53UiC3TU5X+njEdVRdNbYB3lYza' &
			+ '9Qi6M0A3n9DfcpmQC8aWqtsRrmPzsAAAAACZuK9Z6ZxvY6TAAhjawV+i9SjSMuAABl94bL6jPOSzbY6TAAAA+BD28+oI69QpvY3XJZ2yHlS6XbQAAD//xAAjEAACAgICAQUBAQAAAAAAAAADBQQGAQIAECAHERITFBUw/9oACAEBAAEFAus59sN7zDgZm3VpLyWdJPzQmw8xn7GJld6hnHla3iNheEqUKECxWw7jbyjSiwjVi2aOMdZz7Ytliy4l/wCAybC3qz/DyDy8t8wFnQhbnKX0/Lqp21zptyvV4z2TZqwRGXqvtcp2mM/LF1m/rfdUVVD0hctdUw01Q1s7qXChBXxjgHKC9hAXs+qhN/ahYF++f0mcnSS1TUDiJzGuNerdbvq8K++wrhl0' &
			+ '+svdHjzt2XVhDNOr21zpt2CEWTpYI35HfVerxnsmFCCvjcBKDK6tdUw0121zpt1SVWpUvqGu+Enqk2IOwOW63fVxM5OllqmoHESfPCtjO2f9hjwQ9jEWQsLoDZdo2Xy4pIMnmM+2S3aaRT0mcnSS37872T1Q0eTH6tlZw5EQewSedcrhXkgANIoe31XjPNWtemp9vAQtz7o6GU2QAHFF45x74m1JXOy7rcZbhfF1lnV0hcTSGtir9fD/xAA1EQAABAMEBggHAQEAAAAAAAABAgMEAAUREBIhMQYTQVFhsRQgInGh0eHwIzAyM4GRwUJS/9oACAEDAQE/AbM4Y6NunXbW7BfH9ecN9HWCGZbw8YI2QS+ggB+AgxSnChgrC0rZL/WkHLlDvRVI2LU9' &
			+ 'B3Dl7/cO2Lhia6uWnLqooqOFASSCojEpkaTAAUU7SnLu8+usgm4IKapahE4kZ2HxksU+VucSOUgwS1igfEN4cPP5JilOUSmCoDE6lgy5fs/QbLys0bY9Kda0/wBJOey1RQqRROcaAEE0oTF3cMHwt+3v7oKYDBeLlZNZqnLE6jiccg97Ik85JMSXD4KB48QtmjIH7UyW3Z3wIUwGNHW+oYFNtNjbpK9cmW6MYLpA8eNkknYsh1C/2+XpEzm6MvRvBiYcg/vdDhwo6UFVUaiMJKnROCiY0EIljhZ01KquW6I+62z1v0Z+cAyHH9+sNSatumTcAcrZhL0pilqlfwO6HrJVgqKKwetgiI52SKRX6OnQYbA/o9SaywXqwKAGynOEzXyAYNvU0kVaFbat' &
			+ 'cKn/AM7+/u52ytRqk6KZ2FS+84KIGCpcuoq5TRG6cYlS2vYpH4csLZrNU5YnUcTjkHvZDhwo6UFVUaiNiiKiNNYWlcbJJOxZDqF/t8vSCmAwXi5W6RvRK9uE2AHnGiju8mdqOzEPfvO3SKUqgcXqfaAc+HpyskUiv0dOgw2B/RiYS9GYo6pX8Duh6yVYKiisHrDZsq7VBFEKiMS5n0BsVC9WnvDhYc5Uyic2QQ7cC6cHXHaMMXZ2Lgq5NkILkcplVTHAbBCuAwTRxqR30j/P/PHy4WzCXpTFLVK/gd0SyVpS1O6XEw5jbpNMtWn0JMcRz7vW2STgZefVK/bHw4wQ5VCgcg1AfkTabpy1OgYnHIP6MKqHWOKig1EepLJyvLRuh2ibvKGM1avw+EbH' &
			+ 'cOfVOcqZbxxoETLSYidU2WI79nrCih1jiooNRHrZQ3nj9tgClQ44xLpwu7EL4B4+cO1zIJ3iw80jelG4SgfjzrDh2u6Gq5xN1f/EACcRAAIBAwQBAwUBAAAAAAAAAAECAwAQEQQSIDEhEzJBFCIwQmFx/9oACAECAQE/AbvqVXwPNNqJGosT2bCV16NJqiPdSSK/t4swUZNSzmTwOuYJU5FQz+p4PfCeX1Dgdfh6qCX1F/ttS+1cD5v3X0p2Z+bxRGQ1NCYz/LxP6bZtqG3SX0yLjd82ng3/AHL3UURkOKVQgwKIDDBqRQrYF4G3RimOSTeOQxnIpHEgyOE8/wCicI5dgxx0wfdlbyhin2cQCalG1yLxRGQ0qhBgWDBurTwb/uXvhp0ymTWrTzuv' &
			+ 'ppR7Daef9EqOQxnIpHEgyKZggyakfe263dIuxQtSJvXbRBU4NzqHKbbxyGM5FSSmQ+b6aPJ3m88PqeR3XX4IojIf5QAAwOEsKyf7TxNH3x7qPTE+XoAAYHNoI2+KliCdUoyaTTIfJpUVPaOP/8QAOhAAAgEBAwgIAgkFAAAAAAAAAQIDAAQQERITISIxQVFhICMyQlJxocFT4QUkMGJjcoGR0RUzQ5Lw/9oACAEBAAY/ArzHZ/rco8J1R+tHJmFnXwxDD1rrLRLJ+ZyaxVip4g11dtmHItlD1oLbYRKvjj0NWXZpQ/Fd4/TovNM4SNNJJoxREw2Tw728+mssEhikXYy0IJ8I7WP2fy6BiiP1SI6v3jx+xV0JVlOII3Vr6LTHokHHndmIzhLaNXyX' &
			+ 'fescal3Y4BRvoOsmVbhrGPu+XnRVgVYaCDdgNSzr25PYc6y0xksjdl/DyN8U+PV9mQfdrEaRUq92ECMe94tiOJrS2g/h8rjarKAtrG1fifOihBihjOErkbOXnSQQJkRrsFPFKgeNhgVNTQWabPRLv4cr7OSdaPqz+nywq0yeORm9bxNCcR30OxhSzwNiN671PA3HAYY3PYbC+vsklG7kOg8RbDGTK9BTodqnDoZ2zHIs4/vFuyRw875UsD5E3qRwFFWBVhoIPQykXEY4VbY/xCf3034DUs69uT2HOkggTIjXYLnzUiyZDZLZJ2G42qygLaxtX4nzoqwKsNBBvzknfkJHls9qgtqjVcZtvPd/3K9Po6ULDIvYI0B/nc9hsL6+ySYbuQoTQnEd9DsY' &
			+ 'Us8DYjeu9TwNPPO+RGvrUlpzaxBtgHvcsaDKdjkgc6gsy/41wqWzP3xoPA7jUkEy5MiHAi7EaDQsuybY1o3lf5vE0JxHfQ7GFZT6kK9iLhf/AFCUdXHoj5txvz8AAtaD/ccKZHUo66Cp3fYYnFLKp15PYUkUShI0GAA6GUeptI2Sr70c9ETH8VNK9EJGjO52KoxNCX6Q6qP4I7R8+FLFEgjjXQFXpYHSKJazCNvFFq02beU4eIj+KyHJA5VnJM9L91n0elZNmgSH8o6P/8QAKBABAAADCAEFAQEBAAAAAAAAAQARIRAxQVFhcYGxIJGhwdHw8TDh/9oACAEBAAE/IbARWQXrAaNM0m7cQSI/6ybE9rn6FjY+6Ym7WF6ExGMB/TXPtFNd0t/xAWaG' &
			+ 'Px6BZav187+pQkxJz6gU1dWloIrIL1h8pKAeb8f4gxYtJWcVAJMvoO9gOtcxeF/o5tlqTLNUYiZOoyvb+w/kZFJHJsrofd3dkKh7qXr8Vtm7TOoV/pfxBikwmJjDT6dccq+5fS2skz+PPWw/J0qA/L4pXcmXl/JQAY8g7c2JYZS0SCoIpm4txlas/ia/CCoE/dE2zIzRWyfuJkZo1gKUJk2Re2bgH82zzcOra1DS8HxD34L4fDDp4p6Jj07sFwp8pMHXq+H9jIJI5Pg8luprDI4F2oezbXQ+7u7IAGPIO3Nsvz9WJV42H5OlQH5fD+RkUkcm1gU+Og7KHvkTka+onapyaNyPydm4BvNs83DqZ0aK2T9xMjNGgAVgX4rIzYw3oOsi5zNiuAxYpkEV' &
			+ 'LA25uLyzinObH/JaxPyEiDMTCJuZ1I/8mq2ZGaK2T9xVVdJprc3W13XiLzcO9raJDjAzGuTDxgkslf4Hg3cfJ1B1QXcHhdyEiX6DEiv2aVHnDnxoGFSTghX2+F9V/W0GamSSDyBgEvGHCPF6FPaFjX26EFNRNYG7ID2B94lMze1XdvfH/9oADAMBAAIAAwAAABCSj7QWSSlttuuShttts6Vu3sltJN6FfRvZsCKRtqtvyftsJs+GHtttuSAdimPtsdsyCttts+SINtieSSEPQySf/8QAJhEBAAAFAwQDAQEBAAAAAAAAAREhMUFRABBhcYGRoSCx8MEw8f/aAAgBAwEBPxDYFQNECRskV/HcdHRYvmcfRA8jqfdPD6NQQByR0NDrwi8wPvQqzrHk' &
			+ 'TNI78VGq6JJ+y/xcSqAH6mW2h5MluH4cQ+ZdnqP6ThJmmWK3ni8YezOEdgVA0XlCfDD8nK3+JpgQRojbUFTxF4yuT2Qc7ChRgvVUdoL2M7hWFFWgadwKkWHIyxUJ8aDpFTEmI3Nv3QE3A90LpIQCZYfiJbpvD/m8Cnmjw6RITNC8TV95HoHvujfMB/a5gteex14qjVb+RLVLiSYLEmvJPa9C6XL6f4YCxbSIFREqOoK1eSwLDh+obmPhBPs/bXFK8A3ShBJhVZOMl+sEh0Eo2GTj6oz2gkUYS26/z3wGMF6sq7xrED7L+6GhgPkj8JpBMFDytl2EyJtCPvgbIuFzvOiPYVMSiZPgNgFI6APEesz2O/7oCbge6F0uX0/wwFi20+0MESERonGx14qj' &
			+ 'Vb+RLVLiHSKmJMRub4PZ6q/RNArm+0yfDB3M40Rm9P52bdf574DGC9WVUAQShVZOMl+sEh0Eo2GTj6oz19alcuAu6jgnMrSLUFsDvfZiYAq4Aiuq2LPQsdiBqoMpmRknc8V1GrHEf1yjh2AIRHTGqogkf0LZVlLdKEEmFVk4yX6wT3NC8GAsd3crA3jUHWrpw7xwqs+WHGTuTqAAERJif4MEBdD6A90LpFEKKt1+FeBV/as+m5odJvlDtfqR+K44VVAO7oYHPJOg1dZddOBmlZr8hVEYOjh2L+zPw6DDxwf0tQFi8/8ATS3q5E+w9ai+HLI6FDsfH//EACYRAQABAwMDAwUAAAAAAAAAAAERABAhMUFRIHHwYbHhMKHB0fH/2gAIAQIBAT8Qvv6+' &
			+ '1aIx2rUxoUyVrDWGM9qBldKJ4CmtDxr1zhho9n7uhdkeT9EVSVqWjX925+9lwVBrSMD2eb0iMNoEYDVqRGVvdR279qGclTBxi542fZaB/R81s8GvnNADgKcBI03eS+cbYr1sW/hdv3ANLRynd/B0TfqpIYehWkN7thZpIw9GUCu614EYDVoAcBaanMWAf0fNIjDc+QagJ3xeEYnb1+bRynd/BXhdt3evipKETYFAatABtQMt6caxflHnePN7+F2pto2L8cGne8LbfekVDr9DjQ1aNBg6Mrpy/dNY4526QVAS1tgcb0aCDq1rKMO2Kk5NBE0VkaAiDp//xAAnEAEAAgIBAwQBBQEAAAAAAAABESExQQAQUWEgcYGRsTChwdHw4f/aAAgBAQABPxDo' &
			+ 'CYyogDuvFsgoHnIv0pUSck4EAEGtj5E9uDgvIn/s4QGMI+45FcRH+YjtzG/woCMrZ/blEGJJe7NZ74dL6X8tToOx3VoC1YOK+Jgz7hk8aNy362ixMCeHSOxkdnLa20EF9gZfmVMdATGVEAbXjUy0oqe8ZBovK/opXIsKyBMI8mtUgLFDtBk0iYjoi1shAR9k+yox1PNyYJgDj1JQBT+M7mFkojh8xVQzCDYjUPSh+9YZspDWAt0OD6QSzt77YPvXUrAEmHhWLaHyOBPCSkDYnDnFESJEkaY3w6yIfh33BWIhdhIrPJ54YAxh0Exth0k9LwAGwc+L5Oh2Odmu0yjatrx+Hpgr/Z1yHkkLbtAsVPZsTqLpwWbxPzZ887zjd/7zrWZLQn/AlxkPcUdb' &
			+ 'Y+R7DSfSQkj0yjyOJMrGXz086fs4F8Q8C5eM9ZDqyd5HLaqmOZQfx6Ju2jXJBkZJEcpaY6rHPzEVuycwvaUwaIVcMwg2I0j6JdRKWgMfScx80+L/AMb1ofvWGbKQ1gLdDsc7NdplG1bXohhg/tSwnSeeGAMYdBCtsOkfMVUMwg2I1D1CKl8cEV5V0ESUfKjqlHoOksp/L+WeedP2UC+IeBcvFaMvCf8AAlxkPcUc5Y+Eew0n0kJI8kbCVegezAchCIFBVIMpl8BgOmW2KxAPdQ4ngLpEZPzi+eQr40lsB7ArZJvjGEkYkwjsSEdiPQ/4k4UYR08jalMyJABssZzGAWTPSsyWhP8AgS4yHuKNhzSTLubd/ArqzUM1iCA7hUPLv1D7BGA7m0NneGmR' &
			+ '8dUZmRHD+gZ+VcVu/L74FuhKQ00CKP8Au/QzLKlTql+0mnTFEoGS1EgveCPafStZpCPYBXhiihNuwFB7C224NEoUfg/n1HhCByJ2TkvR1S5crZfKuKaQxyg/QxZH7h4kKIcCY+AQFH+0tfT/AP/Z'
	
	case CL_IMAGE_WARNING
		return '/9j/4AAQSkZJRgABAQEASABIAAD/4RmaRXhpZgAASUkqAAgAAAAHABIBAwABAAAAAQAAABoBBQABAAAAYgAAABsBBQABAAAAagAAACgBAwABAAAAAgAAADEBAgANAAAAcgAAADIBAgAUAAAAgAAAAGmHBAABAAAAlAAAAKYAAABIAAAAAQAAAEgAAAABAAAAR0lNUCAyLjEwLjIyAAAyMDIxOjAxOjI2IDIwOjUzOjAzAAEAAaADAAEAAAABAAAAAAAAAAgAAAEEAAEAAAAAAQAAAQEEAAEAAAAAAQAAAgEDAAMAAAAMAQAAAwEDAAEAAAAGAAAABgEDAAEAAAAGAAAAFQEDAAEAAAADAAAAAQIEAAEAAAASAQAAAgIEAAEAAACAGAAAAAAAAAgA' &
			+ 'CAAIAP/Y/+AAEEpGSUYAAQEAAAEAAQAA/9sAQwAIBgYHBgUIBwcHCQkICgwUDQwLCwwZEhMPFB0aHx4dGhwcICQuJyAiLCMcHCg3KSwwMTQ0NB8nOT04MjwuMzQy/9sAQwEJCQkMCwwYDQ0YMiEcITIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy/8AAEQgBAAEAAwEiAAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElK' &
			+ 'U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm' &
			+ '5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8A+f6KKKACiiigAooooAKKKKACiiigAooooAKKKsWNjcalex2lrG0k8mdqKpJOASeBz0BpNqKu9hpNuyK9FezeFPhlp66MH8Q2Uc93I/mIUmlUohVcKwBXDA7s8fjXo9fO4riOlSnyUoc1ut7L5b3/AAPTo5XOceabt/XyPlKivq2vOPFfwy09tGL+HrKOC7jfzHLzSsXQK2VUEtliduOPxowvEdKrPkqw5b9b3Xz2t+IVsrnCPNB3/r5njNFWL6xuNNvZLS6jaOePG5GUgjIBHB56EVXr6JNSV1seY007MKKKKYgooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACvb' &
			+ 'Ph94FtNMgtNdmm+03M8Ec0HylPI3odw4YhshscjtXE/DjwlaeJtQuZr9t1tZ7d9vgjzd4cD5gQVwVB969ytbaGytIbW3TZBBGsca5J2qowBk89BXyuf5jy/7LSbT+16Ppf8Ay6ad0ezluFv++mtOhLRRRXyR7YUUUUAeffEHwLaanBd67DN9muYIJJp/lL+fsQbRywC4C44HevE6+qLq2hvbSa1uE3wTxtHIuSNysMEZHPQ14b8R/CVp4Z1C2msG2215u2W+CfK2BAfmJJbJYn2r63IMx5v9lqtt/Z9F0v8A59NOyPEzLC2/fQWnU4miiivqjxgooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKsWFo+oaja2UZw9xMkSn' &
			+ '3YgD+dV69Z+E3h4G1udUv9PgkilaNrKaRUcgozhivUqQQPToK48fi44ShKq/l6/1qb4ag61RQR3/AIe0W20TSbaCK1giuBBGlxJHEqmVlXGWI6nOe56mtWiivzepOVSTnJ6s+rjFRXKgoooqCgooooAKyvEOi22t6TcwS2sEtwYJEt5JIlYxMy4ypPQ5x3HQVq0VdOcqclOL1RMoqS5WfLV/aPp+o3VlIcvbzPEx91JB/lVevWfiz4eAtbbVLDT4I4omka9mjVEJLsgUt0LEkn16mvJq/SMBi44uhGqvn6/1qfKYmg6NRwYUUUV2GAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBe0azj1DXdPspiwiuLmOJyh5AZgDjPfmvo/' &
			+ 'RNHt9B0iDTLV5Hgh3bWlILHLFjnAA6k9q5T4VaPb2XhddTjeUz6h/rVYjavlu6jbxnoeck13dfC57j3XrOjH4Yv72v6aPosuw3s6ftHu/wAgooorwj0gooooAKKKKACiiigDP1vR7fXtIn0y6eRIJtu5oiAwwwYYyCOoHavnDWbOPT9d1CyhLGK3uZIkLnkhWIGcd+K+n64T4q6Pb3vhdtTkeUT6f/qlUja3mOindxnoOMEV7uRY90Kyoy+GT+5v+kjzcxw3tKftFuvyPDaKKK+6PnQooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACum8BaPcax4ts/s7xL9jkS7k8wkZRJFyBgHnn/69czX0N4N8Jx+G9KgE6RNqQR0lmidirAuWAAO' &
			+ 'O23t2ryc4xywuHa+1LRf5/13O3A4d1qvkjp6KKK/Pj6cKKKKACiuN8d+Mk8PWklnbySR6k8aSwuFRgAXweGPordq8f1jxdruv2iWup33nwJIJFXykXDAEZyqg9Ca9nA5LXxcVUuox89/VL/gnBiMwp0Xy2uz6Sor5t0fxdrugWj2umX3kQPIZGXykbLEAZyyk9AK9m8IeNbPxJi0TzjdpE0rmRUAwGA7H3Haljslr4SPPfmj5fr/AMOx4bH06z5dmdZRRRXjncFFFFAHzx490e40fxbefaHib7ZI93H5ZJwjyNgHIHPH/wBeuZr6G8ZeE4/EmlTiBIl1IoiRTSuwVQHDEEDPbd271881+g5PjlisOl9qOj/z/rsfMY7DujV8mFFFFescQUUUUAFF' &
			+ 'FFABRRRQAUUUUAFFFFABRRRQAUUUUAdt8N/DNtr+r3B1PT5Z9PSBtsnzqglDJxuUjnBPGa93rP0fQ9O0C0e10y38iB5DIy72bLEAZyxJ6AVoV+c5njnjK3Or8q2TPqcJhvYU+V79QooorzjrCiiigD5y8bald6l4t1D7XN5n2aeS2h+UDbGsjbRwOep5PNc/Wt4o/wCRt1n/AK/p/wD0Y1ZNfqGGio0YKKsrI+PrNupJvuFdB4J1K703xbp/2Sby/tM8dtN8oO6NpF3DkcdByOa5+tbwv/yNujf9f0H/AKMWjExUqM1JXVmFFtVItdz6Xooor8vPsAooooAK8I+JHhm20DV7c6Zp8sGnvAu6T52Qyln43MTzgDjNe71n6xoena/aJa6nb+fAkgkV' &
			+ 'd7LhgCM5Ug9Ca9HLMc8HW53fle6RyYvDe3p8q36HzFRRRX6MfLBRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABXp3wr8LWeow3OsXyQXMQZrUWs8AcA/I2/J78kdO/WuH8NaL/wkXiC10r7R9n8/f8Avdm/btQt0yM9Mda+j7Ows9OhMNjaQW0RbcUgjCAnpnA78D8q+ez/ADD2NP2EH70tfl/wf0PUy3De0l7SWy/MsUUUV8SfQBRRRQAUUUUAfPvxE0X+xfFs/wDpHnfbd159zbs3yP8AL1OcY68fSuUr0H4w/wDI22n/AF4p/wCjJK8+r9Jy2cqmEpylvY+TxcVGvJLuFdL4C0mbVvFtn5J/49JEun6fdSRc9SPWuar0H4Pf8jbd/wDXi/8A6Mjp' &
			+ '5jUlTwtScd0gwsVOtGL7ntlFFFfmp9YFFFFABRRRQB5B8VPC1np0NtrFikFtEWW1NrBAEBPztvyO/AHTt1rzGvqW8sLPUYRDfWkFzEG3BJ4w4B6Zwe/J/OvnDxLov/CO+ILrSvtH2jyNn73Zs3bkDdMnHXHWvtsgzD21P2E370dfl/wP1Pn8yw3s5e0js/zMmiiivoTywooooAKKKKACiiigAooooAKKK3PB2kwa54qstOuXkSGbfuaIgMMIzDGQR1HpWdWoqVOVSWyTf3FQi5yUV1PVPhj4dSw8Px315p8Au5ZPOt52VGkETRrjDDkA/Nx7n1rvagsbSOwsLaziLGO3iWJCx5IUADPvxU9fmmLxEsRWlUl1PraNJUqaggooornNQooooAKKKKAP' &
			+ 'I/i3oeoz6kmsx2+7T7e0SOWbeo2sZG4xnJ+8vQd68ur6C+JX/JP9T/7Zf+jUr59r7zIK8quEtL7Lt+Cf6nzeZU1CvddVcK9G+EFtMviS4uCmInsnCtkcnzE/wNec19BfDX/kn+mf9tf/AEa9Vn1d0sG0lfmdvzf6Cy2nz10+2p1dFFFfAn0oUUUUAFFFFABXBfE7w6l/4fkvrPT4DdxSedcTqqLIYljbOWPJA+Xj2HpXe1BfWkd/YXNnKWEdxE0TlTyAwIOPfmujCYiWHrRqR6GVakqtNwZ8s0VueMdJg0PxVe6dbPI8MOza0pBY5RWOcADqfSsOv0ulUVWnGpHZpP7z5KcXCTi+gUUUVoSFFFFABRRRQAUUUUAFe/8Aw/8ADdnomhw31tLO8upW' &
			+ '0E0wkYEKdpPy4AwPnPXPauI+EOlwXerXmoSRgzWWzy23Ebd6yKeBwePWvZa+Q4hzBuX1WPS1/Prb8j3MswyS9s/kFFFFfLnsBRRRQAUUUUAFFFFAFHWNKg1rSptPuXkSGbbuaMgMMMGGMg9xXzBX1bXylX1vDEm41Y9NP1/yPEzdK8H6/oFfSXhHR7jQPC9npl08Tzwb9zRElTudmGMgHoR2r5tr6tquJ6klCnT6Nt/db/NiyiKcpS6q34/8MFFFFfIHuBRRRQAUUUUAFFFFAHI/EDw3Z63oc19cyzpLpttPNCI2ADHaD82Qcj5B0x3rwCvq2vGvi9pcFpq1nqEcYE17v8xtxO7Ysajg8Dj0r6jh7MGpfVZbO9vLrb8zx8zwya9svmeb0UUV9eeG' &
			+ 'FFFFABRRRQAVb0qyGo6xZWJfYLm4jh34zt3MBnHfrVSvTPhV4Ztr97jUtR0+VvIkhksp23opYM24qQQGwVXPWuTHYmOGoSqy6fmzfD0XWqKCPR/DnhfTfDNqY7GLE0qItxLub96yg/Ngk7eSTgetbVFFfm1SpOrJzm7tn1cIRguWKsgoooqCgooooAKKKKACiiigAr5VkikhbbLG6MRnDLg4r6qrmbn4f+F7uQST6ZvYDaD9olHH4NXtZPmVPAuftE3zW28r+a7nn47CSxCjyva588V9W1yn/CtfCP8A0Cf/ACZl/wDiq6unnOZUsdyezTXLfe3W3m+wsBhJ4fm52tbbfMKKKK8Q9EKKKKACiiigAooooAKxfEfhfTfE1qI76LM0SOtvLub90zAf' &
			+ 'NgEbuQDg+lbVFXTqTpSU4OzRM4RmuWSuj5d1WyGnaxfWIfeLa4kh34xu2sRnHbpVSvTPir4ZtrB7fUtO0+VfPkmkvZ13uoYsu0sSSFyWbHSvM6/ScDiY4mhGrHr+aPlMRRdGo4MKKKK6zAKKKKAOj8GeHr3XNctpYLNbm0tbmFrsOy4CFuchj8wwrcDNfQtta29lbrb2sEUECZ2xxIFVcnJwBx1JrkfhhZwQeCrS6jijWa43+Y6oAz7ZHAye+BXZ18BnWNliMTKHSLa+4+ly/DqlSUur1CiiivHO8KKKKACiiigAooooAKKKKACiqmpalaaPp8t/fzeTbRY3vtLYyQBwAT1Irg9X+L2n2d2sem2f9oQlAzS+a0OGyflwyZ6AHPvXVhsDiMT/AAYN' &
			+ '/l970MKuIpUvjlY9HorzjSPi9p95dtHqVn/Z8IQssvmtNlsj5cKmehJz7V3mm6laaxp8V/YTedbS52PtK5wSDwQD1BoxOBxGG/jQa/L71oFLEUqvwSuW6KKK5TcKKKKACiiigAooooAKKKKAIrm1t723a3uoIp4HxujlQMrYORkHjqBXz14z8PXuh65cyz2a21pdXMzWgRlwUDcYCn5Rhl4OK+iq4z4n2cE/gq7upIo2mt9nluyAsm6RAcHtkV7GS42WHxMYdJO33nBmGHVWk5dVqeC0UUV9+fNBXXfDnQrPX/FHk3wZoraL7SEGCHKug2sCDlTk5FcjX0l4R0e40DwvZ6ZdPE88G/c0RJU7nZhjIB6Edq8fOsb9Vw9o/FLRfq/67ndl+H9tVu9k' &
			+ 'a1ta29lbrb2sEUECZ2xxIFVcnJwBx1JqWiivgW23dn0qVtEFFFFIYUUUUAFFFFABRRRQAUUUUAeGfErxHNqHiCaxtr6b7JCnkTQIzrGZEkbOVPBPTn2HpXC1reKP+Rt1n/r+n/8ARjVk1+m4KlGlh4Rh2R8jiJudWTYV3Xw18Rzaf4ghsbm+m+yTJ5EMDs7RiR5FxhRwD159z61wta3hf/kbdG/6/oP/AEYtGNpRq4ecZ9mGHm4VYtH0vRRRX5kfXBRRRQAUUUUAFFFFABRRRQAVFc2tve27W91BFPA+N0cqBlbByMg8dQKlopptO6E1fRngHxG0Kz0DxR5NiGWK5i+0lDgBCzuNqgAYUYGBXI19JeLtHuNf8L3mmWrxJPPs2tKSFG11Y5wCegPa' &
			+ 'vm2vvslxv1rD2l8UdH+j/rsfNZhh/Y1brZnpPwq8NyXs1zq8kqi0CtbbVb59/wAjZxjGMH1zmvZKz9H0PTtAtHtdMt/IgeQyMu9myxAGcsSegFaFfH5jjPrdd1Ft0PdwtD2FNR6hRRRXAdIUUUUAFFFFABRRRQAUUUUAFFFFAHkvxP8ACNz5k3iGGaL7JFEolR2PmF2kI+UBcY+cdT615ZX1bXNXXgDwxeyiS40ze4G0Hz5Bx+De9fTZdn6oUvZV4t22att+B5GKy11J89N2v3PnevU/hh4RufMh8QzTRfZJYmESIx8wOsgHzArjHyHofSu1tfAHhiylMlvpmxyNpPnyHj8W9q6WjMc/Vel7KhFq+7dtvxDC5a6c+eo727BRRRXzJ64UUUUAFFFF' &
			+ 'ABRRRQAUUUUAFFFFABXjfxV8NyWU1tq8cqm0KrbbWb59/wA7ZxjGMD1zmvZKz9Y0PTtftEtdTt/PgSQSKu9lwwBGcqQehNd+XYz6pXVR7dTmxVD29Nx6mhRRRXAdIUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBwfw28UprVpcWdzcyvqCyNKI5GZz5QCDO4jH3j0zXeV8tWd/eadMZrG7ntpSu0vBIUJHXGR24H5V6d4L+Jttb2UWna7JKvlRuxvpZHmaVi+QpUKSOD1z/DX0+a5JUUnWw6un06/15bnj4PMItKnV0fc9XorlP+FleEf+gt/5LS//ABNH/CyvCP8A0Fv/ACWl/wDi' &
			+ 'a8P6hi/+fUv/AAF/5Ho/WaP86+9HV0Vyn/CyvCP/AEFv/JaX/wCJo/4WV4R/6C3/AJLS/wDxNH1DF/8APqX/AIC/8g+s0f5196OrorlP+FleEf8AoLf+S0v/AMTR/wALK8I/9Bb/AMlpf/iaPqGL/wCfUv8AwF/5B9Zo/wA6+9HV0Vyn/CyvCP8A0Fv/ACWl/wDiaP8AhZXhH/oLf+S0v/xNH1DF/wDPqX/gL/yD6zR/nX3o6uiuU/4WV4R/6C3/AJLS/wDxNH/CyvCP/QW/8lpf/iaPqGL/AOfUv/AX/kH1mj/OvvR1dFcp/wALK8I/9Bb/AMlpf/iaP+FleEf+gt/5LS//ABNH1DF/8+pf+Av/ACD6zR/nX3o6uiuU/wCFleEf+gt/5LS//E0f' &
			+ '8LK8I/8AQW/8lpf/AImj6hi/+fUv/AX/AJB9Zo/zr70dXRXKf8LK8I/9Bb/yWl/+Jo/4WV4R/wCgt/5LS/8AxNH1DF/8+pf+Av8AyD6zR/nX3o6uiuU/4WV4R/6C3/ktL/8AE0f8LK8I/wDQW/8AJaX/AOJo+oYv/n1L/wABf+QfWaP86+9HV0Vyn/CyvCP/AEFv/JaX/wCJo/4WV4R/6C3/AJLS/wDxNH1DF/8APqX/AIC/8g+s0f5196OrorlP+FleEf8AoLf+S0v/AMTR/wALK8I/9Bb/AMlpf/iaPqGL/wCfUv8AwF/5B9Zo/wA6+9HV0Vyn/CyvCP8A0Fv/ACWl/wDiaP8AhZXhH/oLf+S0v/xNH1DF/wDPqX/gL/yD6zR/nX3o6uiuU/4W' &
			+ 'V4R/6C3/AJLS/wDxNH/CyvCP/QW/8lpf/iaPqGL/AOfUv/AX/kH1mj/OvvR1dFcp/wALK8I/9Bb/AMlpf/iaP+FleEf+gt/5LS//ABNH1DF/8+pf+Av/ACD6zR/nX3o6uuD+JPilNFtLeztrmVNQaRZTHGzIfKIcZ3AY+8OmaxPGnxNtriyl07QpJW82NGF9FI8LRMHyVClQTwOuf4q8xvL+81GYTX13PcyhdoeeQuQOuMntyfzr3MqySo5KtiFZLp1/ry3POxmYRSdOlq+5Xooor7A8MKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA//Z/+EOoWh0dHA6Ly9ucy5hZG9iZS5jb20v' &
			+ 'eGFwLzEuMC8APD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNC40LjAtRXhpdjIiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczppcHRjRXh0PSJodHRwOi8vaXB0Yy5vcmcvc3RkL0lwdGM0eG1wRXh0LzIwMDgtMDItMjkvIiB4bWxuczp4bXBNTT0i' &
			+ 'aHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6cGx1cz0iaHR0cDovL25zLnVzZXBsdXMub3JnL2xkZi94bXAvMS4wLyIgeG1sbnM6R0lNUD0iaHR0cDovL3d3dy5naW1wLm9yZy94bXAvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1wTU06RG9jdW1lbnRJRD0iZ2ltcDpkb2NpZDpnaW1w' &
			+ 'OjNkOWNjNjRmLTZjNTgtNDhhYi04OGQwLTEyNjVmN2EzZTEzYiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDoxOTlhN2I4NC1kYzBiLTRkZjUtYTNkMC02ODUzODJkMzJhOWUiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpjNmYwOTgyOS01ZTYyLTQ0NzAtOTc1Zi01YjZkOGE3M2RmNTYiIEdJTVA6QVBJPSIyLjAiIEdJTVA6UGxhdGZvcm09IldpbmRvd3MiIEdJTVA6VGltZVN0YW1wPSIxNjExNjkwNzg3Njc1Mjc5IiBHSU1QOlZlcnNpb249IjIuMTAuMjIiIGRjOkZvcm1hdD0iaW1hZ2UvanBlZyIgeG1wOkNy' &
			+ 'ZWF0b3JUb29sPSJHSU1QIDIuMTAiPiA8aXB0Y0V4dDpMb2NhdGlvbkNyZWF0ZWQ+IDxyZGY6QmFnLz4gPC9pcHRjRXh0OkxvY2F0aW9uQ3JlYXRlZD4gPGlwdGNFeHQ6TG9jYXRpb25TaG93bj4gPHJkZjpCYWcvPiA8L2lwdGNFeHQ6TG9jYXRpb25TaG93bj4gPGlwdGNFeHQ6QXJ0d29ya09yT2JqZWN0PiA8cmRmOkJhZy8+IDwvaXB0Y0V4dDpBcnR3b3JrT3JPYmplY3Q+IDxpcHRjRXh0OlJlZ2lzdHJ5SWQ+IDxyZGY6QmFnLz4gPC9pcHRjRXh0OlJlZ2lzdHJ5SWQ+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBz' &
			+ 'dEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDpjaGFuZ2VkPSIvIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjcyNTkzN2FkLTQ0ZjktNDhmZC1iM2I3LTc3NjY5NjBlZmExMiIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iR2ltcCAyLjEwIChXaW5kb3dzKSIgc3RFdnQ6d2hlbj0iMjAyMS0wMS0yNlQyMDo1MzowNyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPHBsdXM6SW1hZ2VTdXBwbGllcj4gPHJkZjpTZXEvPiA8L3BsdXM6SW1hZ2VTdXBwbGllcj4gPHBsdXM6SW1hZ2VDcmVhdG9yPiA8cmRmOlNlcS8+IDwvcGx1czpJ' &
			+ 'bWFnZUNyZWF0b3I+IDxwbHVzOkNvcHlyaWdodE93bmVyPiA8cmRmOlNlcS8+IDwvcGx1czpDb3B5cmlnaHRPd25lcj4gPHBsdXM6TGljZW5zb3I+IDxyZGY6U2VxLz4gPC9wbHVzOkxpY2Vuc29yPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' &
			+ 'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' &
			+ 'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' &
			+ 'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' &
			+ 'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' &
			+ 'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' &
			+ 'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg' &
			+ 'ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3hwYWNrZXQgZW5kPSJ3Ij8+/+ICsElDQ19QUk9GSUxFAAEBAAACoGxjbXMEMAAAbW50clJHQiBYWVogB+UAAQAaABMACAAtYWNzcE1TRlQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1sY21zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANZGVzYwAAASAAAABAY3BydAAAAWAAAAA2d3Rw' &
			+ 'dAAAAZgAAAAUY2hhZAAAAawAAAAsclhZWgAAAdgAAAAUYlhZWgAAAewAAAAUZ1hZWgAAAgAAAAAUclRSQwAAAhQAAAAgZ1RSQwAAAhQAAAAgYlRSQwAAAhQAAAAgY2hybQAAAjQAAAAkZG1uZAAAAlgAAAAkZG1kZAAAAnwAAAAkbWx1YwAAAAAAAAABAAAADGVuVVMAAAAkAAAAHABHAEkATQBQACAAYgB1AGkAbAB0AC0AaQBuACAAcwBSAEcAQm1sdWMAAAAAAAAAAQAAAAxlblVTAAAAGgAAABwAUAB1AGIAbABpAGMAIABEAG8AbQBhAGkAbgAAWFlaIAAAAAAAAPbWAAEAAAAA0y1zZjMyAAAAAAABDEIAAAXe///zJQAAB5MAAP2Q///7' &
			+ 'of///aIAAAPcAADAblhZWiAAAAAAAABvoAAAOPUAAAOQWFlaIAAAAAAAACSfAAAPhAAAtsRYWVogAAAAAAAAYpcAALeHAAAY2XBhcmEAAAAAAAMAAAACZmYAAPKnAAANWQAAE9AAAApbY2hybQAAAAAAAwAAAACj1wAAVHwAAEzNAACZmgAAJmcAAA9cbWx1YwAAAAAAAAABAAAADGVuVVMAAAAIAAAAHABHAEkATQBQbWx1YwAAAAAAAAABAAAADGVuVVMAAAAIAAAAHABzAFIARwBC/9sAQwADAgIDAgIDAwMDBAMDBAUIBQUEBAUKBwcGCAwKDAwLCgsLDQ4SEA0OEQ4LCxAWEBETFBUVFQwPFxgWFBgSFBUU/9sAQwEDBAQFBAUJBQUJFA0L' &
			+ 'DRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU/8IAEQgAZABkAwERAAIRAQMRAf/EABwAAQACAwEBAQAAAAAAAAAAAAAGBwMEBQIBCP/EABsBAQADAQEBAQAAAAAAAAAAAAAFBgcEAwIB/9oADAMBAAIQAxAAAAH9UgAHPjuvkQshJ7VCP0AAABj8/uo8T0HSjOmwNQqUtudfAAAAhNBs0IzqzjY7PG3dvz3Y6PIAADT4umosQ0HrTcf37NEwjOrRLLxX5/pFTAAArjLblGadN2PrFNk1rhKixPQdGL67Z2ygdKU4gAONByVV4ze34m+i1iaX2tUvgelePH671nirP1yjgD5+Kpxq+8mCkBJbfCzjRKvU' &
			+ 'WGaEBZmvUmQ2WIAitQna8yu4AdCW45PcISEZzZwN+V5Lb2vP/f384fH0qLENC1eH3Ak9yg5NboSt8numLn+wJ3pVVmV5rkFzy0wzP7IAJ5pdVldzgKjxDQtTg9wM3T527uGe1Xjl70InrAD9e/X58eP0ABYWqVDoyXHwKzLAAAADP1eUuulfyevwAAAAAB//xAAiEAABBAEEAwEBAAAAAAAAAAAEAQIDBQAQFBYgBhITETD/2gAIAQEAAQUC6mHRBMgv4JX/AMpJEiYYU4wjKE76x/xvzdR53DTQTNIh7lkoIPJIsslbWOPdP4630citWgN+cne8N3E+ePqig5YKinIqtWvLQ0bram7MbTxuTFX1R7vd+U5u0J6Kv4lmZvSdKB/qce/5ha0pu6G1' &
			+ 'vTfjDrXzoMZZW8BIeoJShkscj25NK2CIohxU+tRVtMyekGlZLGsMmtAb7Ny/N/XdKAtnyllZCwqbcE6wyuglGnaVAf8Au96ue53ah99kdVRHLxtc42ucbXONrnG1zja5xtc42ucbXONrkXjjUWONsTP6/wD/xAAuEQABAwEGBAYCAwEAAAAAAAABAgMEAAUREhMgMRAVUqEUITBBUYEjsSIyQ2H/2gAIAQMBAT8B0x4rkk3Ip2yXkJxJN/poQVqCU7mozAjthscLVi4FZydj6Vkxv91fXF1pLyC2r3p1tTKyhXt6EdkyHA2KQgNpCU7Cps1MQfJNNWwrF+RPlQIULxVrRsac5O439Cy42U3mK3P64WuD4j64QwRHRf8AFEAi41LjmM6Ue2qBG8S7' &
			+ '57DfjbKP6LoC83UlOFITwtGN4hq8bjTvUKN4ZoJ9/fjayb49/wAGoicb6B/3RaUbIdxJ2Oiyo2YvNVsP3oltF9hTad6hWe8y+HF7DRKYElooNKSUnCeDbanVhCdzTDKWGw2nRaE4x/xt701achCr1G8UhYcSFp99FrRrjnp++Fkxrhnq+tNrR1Y84bUhtTqsKB50w3ktJb+NDjYdQUK2NPtFhwtq9qiXZCMPxqCUp2Gq1cGf9VFnuRRhHmK50OjvXOh0d650OjvXOh0d650OjvXOh0d650OjvXOh0d650OjvXOh0d6ctlRH8E3UtanFFSt/W/8QANBEAAAQDAgsHBQEAAAAAAAAAAQIDBAAFMQYUEBESFiBBUVNxouETISIwMmHRI6GxwfDx/9oA' &
			+ 'CAECAQE/AdF6/QYEy1hhvaRmufINjLx8tQ5Uiic9AiYPTP3BljU1cMFnJjeErsoPiLTh08q0swyQBmmNa/GFo5OzWKsSoQguRykVVOg+Q8dEZoGXPqhZY7hQyp6jEplBpkImEcRAhxZZLI+gccr3g5DJmEhqhFmphkGFmeg08i0cwvC13J6Sfnpgs0YosMQahHBNzAZ+qJdsEOKZgOWoRLnpX7cqwV18dKbv7g2E4eoe4IEREcY4LKK+FVLgMCOIMcLKdqoZTaOPBIZhc3HZn9J/zq0aROX9/ciIekO4P73w2YUyXgl2hEwU7JoqcNQDoSKYX1tkn9Za/OhaKYXZC7kHxH/GhKnJGjwiylA+Ims7aOWZ0UTeIfb30JY9Fg5Krq18IKYDlAxaDgWV' &
			+ 'KgmKp6BD12Z6uZY+vQkcmI9KK7j07NsOZCyXJklJkjtCF0TN1TJHqGhZqYdoS6KVCnDBaZ/RmTiP6D96NmnqYoXUw+IIVVIiQTqDiAIfuAdujrBrHQbrnbKlWJUIauCO0SrEoMTXLvyuXXH/AJ9tGkHWUV9ZhHSs32lx76Yxxf3GJhJ28x8R+420IGyexb7dYzTHfcvWM0x33L1jNMd9y9YzTHfcvWM0x33L1jNMd9y9YzTHfcvWM0x33L1jNMd9y9YQsqkUcaymV9vmE0yJEAhAxAHnf//EAC8QAAIAAgcGBgIDAAAAAAAAAAECAAMQERIgITEzIjBRYXGSBBMjMkFSQoFiorH/2gAIAQEABj8Cu1zDnkBmYssGl8zu2dsFGMNMP6HAUeQ52l9v' &
			+ 'TdDw6nm1KzFzWFmLk24aYfjKGdsWOMHGzLGZj0phtcGgg4EQZDHZb29dx5SnYl/7QeTGifV9zAIwIhX/ACybreNWo2C0zk6GCYZuJroqY+m+BvFvwGC01fZTE4/xNywx9RMP1c8lTtvn0uS5je0Zw8uWWtHlcWYMvkcoDLiDjQzt7VFcNMbM3DMm6Ywq4xUq+W3wRDI2amq4fDscRitA8OuQxa6ZDGpq6xzgu7WVETJn2NxZi+5TXCTFyaJ9rO2b2LE9bx4WzVFo7D/YRr/1jXHbGuO2Ncdsa47Y1x2xrjtjXHbGuO2NcdsepNLDgBVARBUo+N9//8QAJxAAAQIEBQQDAQAAAAAAAAAAAQARITFBURAgYdHwMHGBoZHB4bH/2gAIAQEAAT8hygUY' &
			+ 'iA0NMo48oFw4iOkShi4qUOS3wAwcXgXI1s8dL1s+hiQeM/fRHXcT9CluguaBGxcuKIumtbBBGTxkyxQW3DEGiujLqWeehNQZjrVgEBN16wOkAQdpw4IoqZUC2Y5j4zoly5nh6N58IZSQDo5iZsDKw8KaHKAhJYCZRQxp2l8X21ff0r7gWSaCK1oORshmSn7yO7umDsygjDNlckXSS9Ui+M2EVGBB2cFMGZWFBkGPnGDByMYOiz7QbmMLJrjLaowen/RoMragydoKCymCU0YYFIGmQgrMClhDtY1Cb5AYZmWEyc+YIb8AJ2Rk3e6L8Bbm653dc7uud3XO7rnd1zu653dc7uud3Q+UpBuRWAdb/9oADAMBAAIAAwAAABCSSWuSSSSCNSSSSRtmySSQ' &
			+ 'T1eSSSF6cKSSLMyNiSdtrNsyTtv5t7S5t/htuFttRNsSttjNttnEkkkmuSSSSSSf/8QAJxEAAQIDCAMBAQEAAAAAAAAAAQARMUFxECAhUWGBwfAwkbGh4dH/2gAIAQMBAT8Qum48BEmARMA2QjtmiCCx8QMnIwUjmJzMzY1jzNDnv9r4o49OR492wnQ6dkMvEunfwT7Y6CZQImAwQQGkhyUUAE6Ydx7ihgzgplFIoz2+U8GD3HJ7j6sAAmBBvZsAsTPiOhODgq5Ap/IXmEBO4Df46AAwFkI1HwjlEEE0IRIAerHUM8a5js7oBIARQikeNWW0LafD9HKdXJ+Y3MMp40MxyLmD2Tr/ABGrXI8Bm2IKCqMSehFyKFEHIy7kiMLEYGwAbkZQFB+mZ3uH' &
			+ 'xEhych/qGs3At+GShUACN7jOPA4VSO8LH0WJwomePd1uG5BjoRwhR4SfA4gBvO4KNwMoshexI7hEcsz5j+3nxoUF4mXix/Z4ZbMEyoZIMY9tlq+qLV9UWr6otX1Ravqi1fVFq+qLV9UWr6omIMsyX/GCIG5RPm//xAAnEQEAAAQFAwUBAQAAAAAAAAABABEhMUFRYXGBECCRMKGxwdHw8f/aAAgBAgEBPxDtHSc7BVdj7tBEptmSXKLLmmsCJM9JTpAq5BGlAGQsfbr0RZzyv6ltL0r6lW3Dld0ln1ultszEdyGCmcz83LPoWkBbNwOWGLm6v9kWNIt96uK5H2vvE1ZZahHwCTzrtAEyREySjE5OJpcTm5qOfoAbzSuuPwpuvQFdE70fhOgaUnOS' &
			+ 'j7jCQyQRySoxpEBkL/po9xPfnXHgr4MYRJNeiLcHyCPwQDLCEexvJn0lKWh0xPp0dO1QK2hXfxuLyrtLq03o/kR/YS8pLeTLslTTkmow5WdR7N0Vpj82OcuxFEnTlWii27DomSXFJFq6T7BzpGavyXNSHymExzHossjVdCMbpQyCxwe83sLJSyLJi6pWRamMLRSqTKblnmL+Sjxjs3OyZti68Rw+zp0mq7S+X7HHa6AIoZjWmaM+JQGWqVgR5FLax7HY7MlmfZslHSFDoz2zNxowRm3x/h2iqZeCgNLTVl57h/kSn6honFTETJGj86wk2zHo4dHDo4dHDo4dHDo4dHDo4Q6AYBVo1XiUGmFIDA9b/8QAJxABAAECBAYDAQEBAAAAAAAAAREAITFB' &
			+ 'UWEQIHGBwfEwkaGx8NH/2gAIAQEAAT8Q5Vj3o09A03aQKMQO6MKAkEJEZE+Iuba8gJpAUlJsH+Os8GuQwX/6n4mnxRGLQ67+V7cYLQSZDNbJJUcpTqOY7jJ2+COdtav5PNLFTVmrSVlQul0Gv8oLlSBLpIEftKRUx5DCVYURZWgv2D7N/giZQINsNdsPvgVYFb1EP1B24E+Qls0YXui05MTHkMiUIkCg5GPZxOvMQ6SBmMX7T9ikZFTKuLwRGbED7GjFQpOwTWIWDqs+eFyxEzbxKw7LWPICYyowBrTHsRaX9Lf6043ogidUTyUxbAR3SD+8kBCJK3/0D035LGEhq+d9rdB5GwFkZYXg70xI5LaAredDknCFjZ2DybhQtTcGQkeEoeF2MjdwpX8W' &
			+ 'StlHQjkmaz1VELLiBJh4qG+3KhygqJ+71ACR7jHJgYC2bxW/RdODYerDji7BfuacpxN04sJDVEbaNEoyVx2NXajmD0xJWneI5IQcL0ydnDvWaWUpcBOiJRIKZzSX8RyiiIwmdBgrAWHSeYCBncaXI7zREXMAwMAOP41MbNKmvtFfaK+0V9or7RX2ivtFfaK+0VCuWU8tlVrIwMQPm//Z'

case else
		return ''
end choose
end function

public subroutine of_report_case (string as_error);//Zweck		Sendet ein Mail an den Informaticon Support
//				Standardmässig wird dies mittels einem mailto-Link gemacht
//				Der Benutzer muss in seiner Mail-Applikation manuell auf "Senden" klicken
//				Kann für die jeweilige Applikation überschrieben werden
//				z.B. könnte man den Fehler an eine REST API senden
//Argument	as_body	Text, welche gesendet werden soll
//Erstellt	2021-02-09 Simon Reichenbach	Ticket 19895: Mailversand implementiert

long ll_i
oleobject lole_wsh

string ls_escaped_chars[] = {'%',   '~r',  '~n',  ' ',   '!',   '"',   '#',   '$',   '&',   '~'',  '(',   ')', &
									  '*',   '+',   ',',   '-',   '.',   '/',   ':',   ';',   '<',   '=',   '>',   '?', &
									  '@',   '[',   '\',   ']',   '{',   '|',   '}'}
string ls_replace_chars[] = {'%24', '',  '%0D%0A','%20', '%21', '%22', '%23', '%25', '%26', '%27', '%28', '%29', &
									  '%2A', '%2B', '%2C', '%2D', '%2E', '%2F', '%3A', '%3B', '%3C', '%3D', '%3E', '%3F', &
									  '%40', '%5B', '%5C', '%5D', '%7B', '%7C', '%7D'}

//2022-05-17 Simon Reichenbach, Ticket 300165: Mailversand neu über Meldeformular-Fenster
open(w_exf_send_form)
if len(message.stringparm) > 0 then
	as_error = message.stringparm + '~r~n~r~n=== Start Error Message ===~r~n' + as_error
else
	return
end if

//HTTP-Zeichen escapen (Mailclient wird mittels mailto-Link geöffnet)
for ll_i = 1 to upperbound(ls_escaped_chars)
	as_error = pf_globalreplace(as_error, ls_escaped_chars[ll_i], ls_replace_chars[ll_i])
next

try
	///Versuchen, Mail via wscript shell zu versenden
	lole_wsh = create oleobject
	if lole_wsh.connecttonewobject('wscript.shell') = 0 then
		if lole_wsh.run('mailto:' + ps_support_mail + '?body=' + as_error) = 0 then
			return
		end if
	end if
	
	//Fallback: Falls OLE Objekt nicht funktioniert, wird der Umweg über cmd genommen
	//Nachteil: Es ploppt kurz das cmd-Fenster auf
	run('cmd /c "start mailto:""' + ps_support_mail +'?body=' + as_error + '"""')

finally
	destroy lole_wsh
end try
end subroutine

protected function boolean pf_is_inherited_from (powerobject apo_object, string as_parent_classname);//Zweck		Prüft ein Objekt ob es von einem bestimmten Parentobjekt vererbt wurde
//				Das Objekt muss nicht direkt vom Parentobjekt vererbt sein, es können auch eine Anzahl Vererbungstufen dazwischen liegen
//				Beispiele: 
//				Objekt = dis2_w_exf_dis_start, Parent-Objekt = dis1_w_exf_dis_start -> Return = true
//				Objekt = dis2_w_exf_dis_start, Parent-Objekt = w_exf_master -> Return = true
//Arg			ref apo_object	Zu prüfendes Object
//				as_parent_classname
//Return		true	apo_object ist ein Nachkomme von as_parent_classname
//				false	apo_object ist kein Nachkomme von as_parent_classname
//Erstellt	2017-11-28 Martin Abplanalp
//Geändert	2020-11-17 Simon Reichenbach	Von exf1_u_exf_service importiert
//				2022-03-30 Simon Reichenbach	Prüfung auf NULL/Valid eingebaut

classdefinition lcd_temp

if not isvalid(apo_object) then
	return false
end if

lcd_temp = apo_object.classdefinition
as_parent_classname = lower(as_parent_classname)

do while isvalid(lcd_temp)
	if lower(lcd_temp.name) = as_parent_classname then return true
	lcd_temp = lcd_temp.ancestor
loop

return false

end function

public function u_exf_blob of_parse_to_blob (powerobject apo_object);//Zweck		Nimmt ein PowerObject entegegen, welches später wieder ausgegeben werden kann
//			Kann im spezialisierten Adapter erweitert werden (z.B. für u_dwsc im A3)
//Argument	as_description	Bezeichner (z.B. Variablenname)
//			apo_data	Wert zu as_description, muss eines der folgenden Elemente sein:
//						datawindow	Wird mittels getfullstate() in einen u_exf_blob konvertiert
//						datastore	Wird mittels getfullstate() in einen u_exf_blob konvertiert
//						object		Sollte die Funktion of_to_string() : string implementiert haben
//Return	u_exf_blob	Blob-Repräsentation von apo_object
//Erstellt	2020-11-17 Simon Reichenbach
//Geändert	2021-02-22 Simon Reichenbach	Ticket 19330: apo_data sollte auch NULL sein können, ohne dass es zu einem Fehler kommt
//			2022-03-31 Simon Reichenbach	Ticket 21348: Von u_exf_error_data nach u_exf_application_adapter migriert
//			2022-05-17 Simon Reichenbach	Ticket 300164: Blacklist für Dataobjects
//			2024-03-14 Simon Reichenbach	Ticket 300541: Allgemeine to-String Funktion ermöglichen (of_parse_to_string)

u_exf_blob lu_blob
lu_blob = create u_exf_blob

if pf_is_inherited_from(apo_object, 'datawindow') &
or pf_is_inherited_from(apo_object, 'datastore') then
	//Typ: Dataobject
	lu_blob.is_type = CS_COMPLEX_DATA_DATAOBJECT
	
	//Daten: Fullstate
	if apo_object.dynamic getfullstate(lu_blob.ibl_data) < 0 then
		lu_blob.ibl_data = blob('error getullstate() < 0', encodingutf8!)
	end if
	
	lu_blob.ibo_confidential = pf_is_dataobject_confidential(apo_object)
	
else
	lu_blob.is_type = CS_COMPLEX_DATA_UNDEFINED
	lu_blob.ibl_data = blob('No string representation available', encodingutf8!)
	lu_blob	= of_parse_to_blob(apo_object, lu_blob)
end if

return lu_blob


end function

public function string of_get_current_username ();//Zweck		Gibt den Benutzername des aktuell angemeldeten Benutzers zurück
//Return		Benutzername
//				NULL, falls Benutzername nicht ermittelt werden kann
//Erstellt	2022-05-16 Simon Reichenbach
//Geändert	2022-05-17 Simon Reichenbach	Ticket 300165: Benutzername wird neu für Mailversand benötigt

constant ulong LUL_BUFFER_SIZE_DEFAULT = 64
ulong lul_buffer_size = LUL_BUFFER_SIZE_DEFAULT
string ls_user
ls_user = space(lul_buffer_size)
try
	if not pef_get_username(ls_user, lul_buffer_size) then
		setnull(ls_user)
	end if
	// wenn der Buffer zu klein ist, gibt pef_get_username() false und 
	// die benötigte Buffer grösse zurück
	if lul_buffer_size > LUL_BUFFER_SIZE_DEFAULT then
		ls_user = space(lul_buffer_size)
		if not pef_get_username(ls_user, lul_buffer_size) then
			setnull(ls_user)
		end if
	end if
		
catch (runtimeerror lr_r)
	setnull(ls_user)
end try

return ls_user

end function

protected function boolean pf_is_dataobject_confidential (powerobject apo_dataobject);//Zweck		Kann aufgerufen werden, um zu überprüfen, ob ein Dataobject vertraulich ist.
//				Vertrauliche Dataobjects werden im Exception Framework GUI nicht angezeigt.
//				Der Export funktioniert jedoch trotzdem!
//Argument	apo_dataobject	Datawindow oder Datastore, für welchen überprüft werden soll, ob er vertraulich ist.
//Return		true	Das Dataobject ist vertraulich
//				false	Sonst
//Erstellt	2022-05-17 Simon Reichenbach	Ticket 300164: Blacklist für Dataobjects

long ll_i
string ls_dataobject
datawindow ldw_dataobject
datastore lds_dataobject

if not isvalid(apo_dataobject) then
	return false
end if

if pf_is_inherited_from(apo_dataobject, 'datawindow') then
	ldw_dataobject = apo_dataobject
	ls_dataobject = ldw_dataobject.dataobject
elseif pf_is_inherited_from(apo_dataobject, 'datastore') then
	lds_dataobject = apo_dataobject
	ls_dataobject = lds_dataobject.dataobject
else
	return false
end if

for ll_i = 1 to upperbound(ps_confidential_dataobjects)
	if ls_dataobject = ps_confidential_dataobjects[ll_i] then
		return true
	end if
next

return false

end function

public subroutine of_add_confidential_dataobject (string as_dataobject);//Zweck		Kann aufgerufen werden, um ein bestimmtes Dataobject als vertraulich zu markieren.
//			Vertrauliche Dataobject werden auf eine "Blackliste" genommen.
//			Dataobjects welche sich in dieser Blackliste befinden werden im Exception Framework GUI
//			nicht angezeigt. Der Export funktioniert jedoch trotzdem!
//Argument	as_dataobject	Dataobject, welches als vertraulich markiert werden soll
//							Beispiel: d_adr_search_l
//Erstellt	2022-05-17 Simon Reichenbach	Ticket 300164: Blacklist für Dataobjects

ps_confidential_dataobjects[upperbound(ps_confidential_dataobjects) + 1] = as_dataobject
end subroutine

public function u_exf_error_data of_download (string as_name, string as_key) throws u_exf_ex;//Zweck		Lädt eine Exception von einem Onlinestorage herunter
//			Abstrakte Funktion, muss in höheren Schichten implementiert werden
//Argument	as_name	Name der Exception (z.B. 2022-08-17_12-23_12321)
//			as_key	Schlüssel, welcher zum Verschlüsseln der Exception verwendet wurde
//					als HEX String (z.B. '0A1B2C3D4E5F6789'
//Return	u_exf_error_data	
//Throws	u_exf_ex		Falls ein Fehler auftritt
//Erstellt	2023-06-27 Simon Reichenbach

throw(gu_e.iu_as.of_re_notimplemented(gu_e.of_new_error().of_push(populateerror(0, 'not implemented'))))

u_exf_error_data lu_e
return lu_e
end function

public function st_encrypt_result pf_serialize_and_encrypt (u_exf_error_data au_error) throws u_exf_ex;//Zweck		Serialisiert und verschlüsselt ein error_data-Objekt
//				Wird zum Upload auf den exception server benötigt
//				Generiert einen Zufälligen Schlüssel und verchlüsselt die serialisierten Daten
//Argument	au_error	Error-Objekt, welches serialisiert und verschlüsselt werden soll
//Return		st_encrypt_result
//					s_key			verwendeter (Einmal-)Schlüssel
//					bl_cipher	verschlüsselte Daten (JSON)
//Throws		u_exf_ex
//Erstellt	2022-08-17 Simon Reichenbach

ulong lu_bcrypt_result
blob lbl_key
lbl_key = blob(space(8), encodingansi!)
st_encrypt_result lst_ret
crypterobject lco_crypt

lco_crypt = create crypterobject

lu_bcrypt_result = pef_bcrypt_generate_random( &
	0, lbl_key, len(lbl_key), PCUL_BCRYPT_USE_SYSTEM_PREFERRED_RNG &
)
if lu_bcrypt_result <> 0 or isnull(lu_bcrypt_result) then
	throw(gu_e.iu_as.of_ex(gu_e.of_new_error() &
		.of_push(populateerror(0, 'Encryption Key could not be created')) &
		.of_push('lu_bcrypt_result', lu_bcrypt_result) &
	))
end if

lst_ret.bl_cipher = lco_crypt.symmetricencrypt( &
	aes!, &
	pu_serialization.of_serialize(au_error), &
	blobmid(lco_crypt.sha(sha256!, lbl_key), 1, 256) &
)
lst_ret.s_key = pu_serialization.of_hexencode(lbl_key)
 
return lst_ret
end function

public function boolean of_is_auto_ubload_enabled ();return pbo_auto_upload_enabled
end function

protected function string pf_get_current_computername ();//Zweck		Gibt den Computername zurück (als FQDN)
//Return		Benutzername
//				NULL, falls Computername nicht ermittelt werden kann
//Erstellt	2023-01-17 Simon Reichenbach

constant ulong LUL_BUFFER_SIZE_DEFAULT = 64
ulong lul_buffer_size = LUL_BUFFER_SIZE_DEFAULT
string ls_computername
ls_computername = space(lul_buffer_size)
try
	if not pef_get_computername( &
		PCL_GETCOMPUTERNAME_FORMAT_DNS_FQDN, ls_computername, lul_buffer_size &
	) then
		setnull(ls_computername)
	end if
	
	// wenn der Buffer zu klein ist, gibt pef_get_username() false und 
	// die benötigte Buffer grösse zurück
	if lul_buffer_size > LUL_BUFFER_SIZE_DEFAULT then
		ls_computername = space(lul_buffer_size)
		if not pef_get_computername( &
			PCL_GETCOMPUTERNAME_FORMAT_DNS_FQDN, ls_computername, lul_buffer_size &
		) then
		setnull(ls_computername)
		end if
	end if
		
catch (runtimeerror lr_r)
	setnull(ls_computername)
end try

return ls_computername

end function

protected function string pf_get_context_information ();//Zweck		Gibt Informationen zum aktuellen Systemkontext zurück.
//				Wird benötigt um die Analyse von Exceptions zu vereinfachen.
//				Kann im inf-Adapter überschrieben werden
//Return		string	
//Erstellt	2023-01-24 Simon Reichenbach	Ticket 300424

return ''
end function

public function string of_upload (u_exf_error_data au_error, string as_name) throws u_exf_ex;//Zweck		Lädt eine Exception auf den Exception Server hoch
//				Vor dem Upload werden die Daten mit einem zufälligen Schlüssel verschlüsselt
//Argument	au_error	Exception-Daten, welche hochgeladen werden sollen
//				as_name	Name der Daten, sollte eindeutig sein (z.B. Timestamp + Zufallszahl)
//Return		string	Verwendeter Zufallsschlüssel
//Throws		u_exf_ex
//Erstellt	2023-01-24 Simon Reichenbach	Ticket 306270

long ll_pos = 1
long ll_http_result
string ls_desc
st_encrypt_result lst_data
httpclient lhc_http
lhc_http = create httpclient

// check args
if as_name = '' or isnull(as_name) then
	throw(gu_e.iu_as.of_ex(gu_e.of_new_error() &
		.of_push(populateerror(0, 'no name was specified for exception uploading')) &
		.of_push('as_name', as_name) &
	))
end if
if not isvalid(au_error) then
	throw(gu_e.iu_as.of_ex(gu_e.of_new_error() &
		.of_push(populateerror(0, 'invalid error object was specified for exception uploading')) &
	))
end if

au_error.of_push('context_information', this.pf_get_context_information())
lst_data = pf_serialize_and_encrypt(au_error)
if len(lst_data.bl_cipher) > pul_exception_server_max_payload_size then
	throw(gu_e.iu_as.of_ex(gu_e.of_new_error() &
		.of_push(populateerror(0, 'exception data too large')) &
	))
end if

if isnull(of_get_current_username()) then
	ls_desc = pf_get_current_computername()
elseif isnull(pf_get_current_computername()) then
	ls_desc = of_get_current_username()
else
	ls_desc = of_get_current_username() + '@' + pf_get_current_computername()
end if

lhc_http.timeout = pul_exception_server_timeout
lhc_http.setrequestheader('uid', as_name)
lhc_http.setrequestheader('description', ls_desc)
lhc_http.setrequestheader('Authorization', ps_exception_server_api_key)
lhc_http.setrequestheader('Content-Length', string(len(lst_data.bl_cipher)))
lhc_http.setrequestheader('Content-Type', 'application/octet-stream')

ll_http_result =  lhc_http.postdatastart(ps_exception_server_url)
if ll_http_result = 1 then
	do while ll_pos <= len(lst_data.bl_cipher)
		ll_http_result = lhc_http.postdata( &
			blobmid(lst_data.bl_cipher, ll_pos, pul_exception_server_package_size), &
			len(blobmid(lst_data.bl_cipher, ll_pos, pul_exception_server_package_size)) &
		)
		if ll_http_result <> 1 or isnull(ll_http_result) then
			throw(gu_e.iu_as.of_ex_webrequest(gu_e.of_new_error() &
				.of_push(populateerror(0, 'Upload failed at PostData')) &
				.of_push('ll_http_result', ll_http_result) &
				.of_push('au_error', au_error) &
				.of_push('as_name', as_name) &
				.of_push('ll_pos', ll_pos) &
				.of_push('ps_exception_server_url', ps_exception_server_url) &
			))
		end if
		ll_pos += pul_exception_server_package_size
	loop
else
	throw(gu_e.iu_as.of_ex_webrequest(gu_e.of_new_error() &
		.of_push(populateerror(0, 'Upload failed at PostDataStart')) &
		.of_push('ll_http_result', ll_http_result) &
		.of_push('au_error', au_error) &
		.of_push('as_name', as_name) &
		.of_push('ps_exception_server_url', ps_exception_server_url) &
	))
end if

long ll
ll_http_result = lhc_http.postdataend()
ll = lhc_http.getresponsestatuscode() 
string ls
ll = lhc_http.getresponsebody(ls)
if ll_http_result = 1 and lhc_http.getresponsestatuscode() = 200 then
	return lst_data.s_key
else
	throw(gu_e.iu_as.of_ex_webrequest(gu_e.of_new_error() &
		.of_push(populateerror(0, 'Upload failed at PostDataEnd')) &
		.of_push('ll_http_result', ll_http_result) &
		.of_push('au_error', au_error) &
		.of_push('as_name', as_name) &
		.of_push('ps_exception_server_url', ps_exception_server_url) &
		.of_push('http statuscode', lhc_http.getresponsestatuscode()) &
	))
end if

end function

protected function string pf_get_setting (string as_section, string as_key, string as_default_value);//Zweck		Liest eine Einstellung aus dem Konfiguration (exf.ini)
//Argument	as_section			Bereich in der INI Datei
//				as_key				Schlüssel
//				as_default_value	Fallbackwert, falls Key oder Datei nicht existiert
//Return		string
//Erstellt	2023-02-02 Simon Reichenbach

string ls_ret
string ls_file
if fileexists(getcurrentdirectory() + '\exf.ini') then
	ls_file = getcurrentdirectory() + '\exf.ini'
else
	ls_file = 'exf.ini'
end if

ls_ret = profilestring(ls_file, as_section, as_key, as_default_value)
if len(ls_ret) > 0 then
	return ls_ret
else
	return as_default_value
end if
end function

protected function integer pf_get_setting (string as_section, string as_key, integer ai_default_value);//Zweck		Liest eine Einstellung aus dem Konfigurationsfile (exf.ini)
//Argument	as_section			Bereich in der INI Datei
//				as_key				Schlüssel
//				ai_default_value	Fallbackwert, falls Key oder Datei nicht existiert
//Return		integer
//Erstellt	2023-02-02 Simon Reichenbach

integer li_ret
string ls_file
if fileexists(getcurrentdirectory() + '\exf.ini') then
	ls_file = getcurrentdirectory() + '\exf.ini'
else
	ls_file = 'exf.ini'
end if

li_ret = profileint(ls_file, as_section, as_key, ai_default_value)
if isnull(li_ret) then
	return li_ret
else
	return ai_default_value
end if
end function

protected function boolean pf_get_setting (string as_section, string as_key, boolean abo_default_value);//Zweck		Liest eine Einstellung aus dem Konfigurationsfile (exf.ini)
//Argument	as_section			Bereich in der INI Datei
//				as_key				Schlüssel
//				abo_default_value	Fallbackwert, falls Key oder Datei nicht existiert
//Return		boolean
//Erstellt	2023-02-02 Simon Reichenbach

integer li_default_value 
string ls_file
if fileexists(getcurrentdirectory() + '\exf.ini') then
	ls_file = getcurrentdirectory() + '\exf.ini'
else
	ls_file = 'exf.ini'
end if

if abo_default_value then
	li_default_value = 1
else
	li_default_value = 0
end if

choose case profileint(ls_file, as_section, as_key, li_default_value)
	case is > 0
		return true
	case is <= 0
		return false
	case else // null
		return abo_default_value
end choose
end function

public subroutine of_enable_auto_upload (boolean abo_auto_upload);pbo_auto_upload_enabled = abo_auto_upload
end subroutine

public function u_exf_blob of_parse_to_blob (any aa_data, u_exf_blob au_else);//Zweck		Nimmt eine beliebige Variable entegegen und konvertiert es in einen u_exf_blob
//			Wenn diese Serialisierung fehlschlägt, wird au_else zurückgegeben
//			Die Idee ist, dass in der Nutzerapplikation die gf_szn_to_string()
//			Funktion der base.serialization Bibliothek verwendet wird
//Argument	aa_data	Variable eines beliebigen Datentyps (Objekt oder Primitiver Datentyp)iert haben
//			au_else	Alternativer Wert, falls aa_data nicht serialisiert werden kann
//Return	u_exf_blob
//Erstellt	2020-03-14 Simon Reichenbach	Tickewt 300541

powerobject lu_data
string ls_data
u_exf_blob lu_ret
lu_ret = create u_exf_blob

lu_ret.is_type = this.CS_COMPLEX_DATA_STRING

try
	lu_data = aa_data
	ls_data = lu_data.dynamic of_to_string()
	lu_ret.ibl_data = blob(ls_data, encodingutf8!)
catch (runtimeerror lre_e)
	lu_ret.ibl_data = blob(string(aa_data), encodingutf8!)
end try

if len(lu_ret.ibl_data) = 0 then
	return au_else
end if

return lu_ret
end function

on u_exf_application_adapter.create
call super::create
TriggerEvent( this, "constructor" )
end on

on u_exf_application_adapter.destroy
TriggerEvent( this, "destructor" )
call super::destroy
end on

event constructor;//Zweck	Objekt für die Kommunikation mit dem A3 (oder einer anderen Applikation)
//			Wird benötigt, damit aus das ExceptionFramework auf das A3 Framework zugreifen
//			kann, ohne eine Abhängigkeit darauf zu haben (Dependency Injection)

pu_serialization = create u_exf_serialization

pbl_pic_error = pu_serialization.of_base64decode(pf_get_pic_as_base64(CL_IMAGE_ERROR))
pbl_pic_warning = pu_serialization.of_base64decode(pf_get_pic_as_base64(CL_IMAGE_WARNING))

//Kongiguration lesen
ps_exception_server_url					= pf_get_setting('exf_server', 'url', ps_exception_server_url)
ps_exception_server_api_key				= pf_get_setting('exf_server', 'token', ps_exception_server_api_key)
pbo_auto_upload_enabled					= pf_get_setting('exf_server', 'auto_upload', pbo_auto_upload_enabled)
pul_exception_server_package_size		= pf_get_setting('exf_server', 'package_size', pul_exception_server_package_size)
pul_exception_server_timeout			= pf_get_setting('exf_server', 'timeout', pul_exception_server_timeout)
pul_exception_server_max_payload_size	= pf_get_setting('exf_server', 'max_payload_size', pul_exception_server_max_payload_size)

end event

